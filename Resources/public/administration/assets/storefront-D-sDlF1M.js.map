{"version":3,"file":"storefront-D-sDlF1M.js","sources":["../../../app/administration/src/modules/sw-theme-manager/mixin/sw-theme.mixin.js","../../../app/administration/src/modules/sw-theme-manager/page/sw-theme-manager-detail/sw-theme-manager-detail.html.twig","../../../app/administration/src/modules/sw-theme-manager/page/sw-theme-manager-detail/index.js","../../../app/administration/src/modules/sw-theme-manager/page/sw-theme-manager-list/sw-theme-manager-list.html.twig","../../../app/administration/src/modules/sw-theme-manager/page/sw-theme-manager-list/index.js","../../../app/administration/src/modules/sw-theme-manager/component/sw-theme-list-item/sw-theme-list-item.html.twig","../../../app/administration/src/modules/sw-theme-manager/component/sw-theme-list-item/index.js","../../../app/administration/src/modules/sw-theme-manager/component/sw-theme-modal/sw-theme-modal.html.twig","../../../app/administration/src/modules/sw-theme-manager/component/sw-theme-modal/index.js","../../../app/administration/src/modules/sw-theme-manager/acl/index.js","../../../app/administration/src/modules/sw-theme-manager/index.js","../../../app/administration/src/modules/sw-settings-storefront/page/sw-settings-storefront-index/sw-settings-storefront-index.html.twig","../../../app/administration/src/modules/sw-settings-storefront/page/sw-settings-storefront-index/index.js","../../../app/administration/src/modules/sw-settings-storefront/component/sw-settings-storefront-configuration/sw-settings-storefront-configuration.html.twig","../../../app/administration/src/modules/sw-settings-storefront/component/sw-settings-storefront-configuration/index.js","../../../app/administration/src/modules/sw-settings-storefront/index.js","../../../app/administration/src/extension/sw-sales-channel/page/sw-sales-channel-detail/sw-sales-channel-detail.html.twig","../../../app/administration/src/extension/sw-sales-channel/page/sw-sales-channel-detail/index.js","../../../app/administration/src/extension/sw-sales-channel/view/sw-sales-channel-detail-theme/sw-sales-channel-detail-theme.html.twig","../../../app/administration/src/extension/sw-sales-channel/view/sw-sales-channel-detail-theme/index.js","../../../app/administration/src/core/service/api/theme.api.service.js","../../../app/administration/src/init/api-service.init.js"],"sourcesContent":["/**\n * @package discovery\n */\n\nconst { Mixin } = Shopware;\n\nMixin.register('theme', {\n    inject: [\n        'repositoryFactory',\n        'themeService',\n        'acl'\n    ],\n\n    data() {\n        return {\n            showDeleteModal: false,\n            showMediaModal: false,\n            showRenameModal: false,\n            showDuplicateModal: false,\n            newThemeName: '',\n            modalTheme: null\n        };\n    },\n\n    computed: {\n        themeRepository() {\n            return this.repositoryFactory.create('theme');\n        }\n    },\n\n    methods: {\n        onDeleteTheme(theme) {\n            if (!this.acl.can('theme.deleter')) {\n                return;\n            }\n\n            this.modalTheme = theme;\n            this.showDeleteModal = true;\n        },\n\n        onCloseDeleteModal() {\n            this.showDeleteModal = false;\n            this.modalTheme = null;\n        },\n\n        onConfirmThemeDelete() {\n            this.deleteTheme(this.modalTheme);\n\n            this.showDeleteModal = false;\n            this.modalTheme = null;\n        },\n\n        deleteTheme(theme) {\n            const titleDeleteError = this.$tc('sw-theme-manager.components.themeListItem.notificationDeleteErrorTitle');\n            const messageDeleteError = this.$tc('sw-theme-manager.components.themeListItem.notificationDeleteErrorMessage');\n\n            this.isLoading = true;\n            this.themeRepository.delete(theme.id, Shopware.Context.api).then(() => {\n                if (this.getList) {\n                    this.getList();\n                    return;\n                }\n\n                this.$router.push({ name: 'sw.theme.manager.index' });\n            }).catch(() => {\n                this.isLoading = false;\n                this.createNotificationError({\n                    title: titleDeleteError,\n                    message: messageDeleteError\n                });\n            });\n        },\n\n        onDuplicateTheme(theme) {\n            if (!this.acl.can('theme.creator')) {\n                return;\n            }\n\n            this.modalTheme = theme;\n            this.showDuplicateModal = true;\n        },\n\n        onCloseDuplicateModal() {\n            this.showDuplicateModal = false;\n            this.modalTheme = null;\n            this.newThemeName = '';\n        },\n\n        onConfirmThemeDuplicate() {\n            this.duplicateTheme(this.modalTheme, this.newThemeName);\n\n            this.showDuplicateModal = false;\n            this.modalTheme = null;\n            this.newThemeName = '';\n        },\n\n        duplicateTheme(parentTheme, name) {\n            const themeDuplicate = this.themeRepository.create(Shopware.Context.api);\n\n            themeDuplicate.name = name;\n            themeDuplicate.parentThemeId = parentTheme.id;\n            themeDuplicate.author = parentTheme.author;\n            themeDuplicate.description = parentTheme.description;\n            themeDuplicate.labels = parentTheme.labels;\n            themeDuplicate.helpTexts = parentTheme.helpTexts;\n            themeDuplicate.customFields = parentTheme.customFields;\n            themeDuplicate.baseConfig = null;\n            themeDuplicate.configValues = null;\n            themeDuplicate.previewMediaId = parentTheme.previewMediaId;\n            themeDuplicate.active = true;\n\n            this.themeRepository.save(themeDuplicate, Shopware.Context.api).then(() => {\n                this.$router.push({ name: 'sw.theme.manager.detail', params: { id: themeDuplicate.id } });\n            });\n        },\n\n        onRenameTheme(theme) {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            this.modalTheme = theme;\n            this.newThemeName = this.modalTheme.name;\n            this.showRenameModal = true;\n        },\n\n        onCloseRenameModal() {\n            this.showRenameModal = false;\n            this.modalTheme = null;\n            this.newThemeName = '';\n        },\n\n        onConfirmThemeRename() {\n            this.RenameTheme(this.modalTheme, this.newThemeName);\n\n            this.showRenameModal = false;\n            this.modalTheme = null;\n            this.newThemeName = '';\n        },\n\n        RenameTheme(theme, name) {\n            if (name) {\n                theme.name = name;\n            }\n\n            this.themeRepository.save(theme, Shopware.Context.api);\n        }\n    }\n});\n","{% block sw_theme_manager_detail %}\n    <sw-page class=\"sw-theme-manager-detail\">\n\n        {% block sw_theme_manager_detail_search_bar %}\n            <template #search-bar>\n                <sw-search-bar\n                    :placeholder=\"$tc('sw-theme-manager.general.placeholderSearchBar')\"\n                    :entityService=\"themeRepository\"\n                    @search=\"onSearch\"\n                ></sw-search-bar>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_detail_smart_bar_header %}\n            <template #smart-bar-header>\n\n                {% block sw_theme_manager_detail_smart_bar_header_title %}\n                    <h2 v-if=\"theme\">\n                        {% block sw_theme_manager_detail_smart_bar_header_title_text %}\n                            {{ theme.name }}\n                        {% endblock %}\n                    </h2>\n\n                    <h2 v-else>\n                        {% block sw_theme_manager_detail_smart_bar_header_title_text_default %}\n                            {{ $tc('sw-theme-manager.list.textThemeOverview') }}\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_detail_smart_bar_actions %}\n            <template #smart-bar-actions>\n                <sw-button-group\n                    v-tooltip.bottom=\"{\n                        message: $tc('sw-privileges.tooltip.warning'),\n                        disabled: acl.can('theme.editor'),\n                        showOnDisabledElements: true\n                    }\"\n                    class=\"sw-theme-manager-detail__save-button-group\"\n                    :split-button=\"true\"\n                >\n                    {% block sw_theme_manager_detail_smart_bar_actions_save %}\n                        <sw-button-process\n                            v-tooltip.bottom=\"{\n                                message: $tc('sw-privileges.tooltip.warning'),\n                                disabled: acl.can('theme.editor'),\n                                showOnDisabledElements: true\n                            }\"\n                            class=\"sw_theme_manager_detail__save-action\"\n                            :is-loading=\"isLoading\"\n                            :process-success=\"isSaveSuccessful\"\n                            variant=\"primary\"\n                            :disabled=\"isLoading || !acl.can('theme.editor')\"\n                            @process-finish=\"saveFinish\"\n                            @click.prevent=\"onSave\"\n                        >\n                            {{ $tc('sw-theme-manager.actions.save') }}\n                        </sw-button-process>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_smart_bar_actions_save_context_menu %}\n                        <sw-context-button>\n                            <template #button>\n                                <sw-button\n                                    class=\"sw_theme_manager_detail__button-context-menu\"\n                                    square\n                                    variant=\"primary\"\n                                    :disabled=\"isLoading || !acl.can('theme.editor')\"\n                                >\n                                    <sw-icon\n                                            name=\"regular-chevron-down-xs\"\n                                            size=\"16\"\n                                    />\n                                </sw-button>\n                            </template>\n\n                            {% block sw_theme_manager_detail_smart_bar_actions_save_context_menu_actions %}\n                                {% block sw_theme_manager_detail_smart_bar_actions_save_clean %}\n                                    <sw-context-menu-item\n                                        class=\"sw_theme_manager_detail__save-clean-action\"\n                                        :disabled=\"!acl.can('theme.editor')\"\n                                        @click=\"onSaveClean\"\n                                        v-tooltip.top=\"{\n                                            message: $tc('sw-theme-manager.actions.saveCleanToolTip'),\n                                            disabled: !acl.can('theme.editor'),\n                                            showOnDisabledElements: true\n                                        }\"\n                                    >\n                                        {{ $tc('sw-theme-manager.actions.saveClean') }}\n                                    </sw-context-menu-item>\n                                {% endblock %}\n\n                                {% block sw_theme_manager_detail_smart_bar_actions_validate %}\n                                    <sw-context-menu-item\n                                        class=\"sw_theme_manager_detail__validate-action\"\n                                        :disabled=\"!acl.can('theme.editor')\"\n                                        @click=\"onValidate\"\n                                        v-tooltip.top=\"{\n                                            message: $tc('sw-theme-manager.actions.validateToolTip'),\n                                            disabled: !acl.can('theme.editor'),\n                                            showOnDisabledElements: true\n                                        }\"\n                                    >\n                                        {{ $tc('sw-theme-manager.actions.validate') }}\n                                    </sw-context-menu-item>\n                                {% endblock %}\n                            {% endblock %}\n                        </sw-context-button>\n                    {% endblock %}\n                </sw-button-group>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_detail_content %}\n            <template #content>\n                <div\n                    v-if=\"!shouldShowContent\"\n                    class=\"sw-theme-manager-detail__content-skeleton\"\n                >\n                    <sw-skeleton />\n                    <sw-skeleton />\n                </div>\n\n                <div v-else class=\"sw-theme-manager-detail__content\">\n                    <sw-tabs\n                        defaultItem=\"default\"\n                        positionIdentifier=\"theme-manager-detail-tabs\"\n                        @new-item-active=\"onChangeTab\"\n                    >\n                        <template #default=\"{ active }\">\n                            <sw-tabs-item v-if=\"hasMoreThanOneTab\"\n                                          v-for=\"(tab, tabName) in structuredThemeFields.tabs\"\n                                          :key=\"tabName\"\n                                          :title=\"tab.label\"\n                                          :name=\"tabName\"\n                                          :active=\"active === tabName\">\n                                {{ tab.label || $tc('sw-theme-manager.general.defaultTab') }}\n                            </sw-tabs-item>\n                        </template>\n\n                        <template #content=\"{ active }\">\n                            <template v-if=\"active === 'default'\">\n                                <template v-if=\"isDerived\">\n                                    {% block sw_theme_manager_detail_content_inheritance %}\n                                        <div class=\"sw-theme-manager-detail__inheritance\">\n                                            {% block sw_theme_manager_detail_content_inheritance_icon %}\n                                                <sw-icon size=\"20\" name=\"regular-link-horizontal\"></sw-icon>\n                                            {% endblock %}\n\n                                            {% block sw_theme_manager_detail_content_inheritance_text %}\n                                                <p class=\"sw-theme-manager-detail__inheritance-text\" v-if=\"parentTheme\">\n                                                    {{ $tc('sw-theme-manager.detail.inheritanceInfo', 0, { parentThemeName: parentTheme.name }) }}\n                                                </p>\n                                                <p class=\"sw-theme-manager-detail__inheritance-text\" v-else-if=\"defaultTheme\">\n                                                    {{ $tc('sw-theme-manager.detail.inheritanceInfo', 0, { parentThemeName: defaultTheme.name }) }}\n                                                </p>\n                                            {% endblock %}\n                                        </div>\n                                    {% endblock %}\n                                </template>\n\n                                {% block sw_theme_manager_detail_content_info %}\n                                    <sw-card\n                                        class=\"sw-theme-manager-detail__info-card\"\n                                        positionIdentifier=\"theme-manager-detail-info\"\n                                    >\n                                        <div class=\"sw-theme-manager-detail__info\">\n\n                                            {% block sw_theme_manager_detail_content_info_image %}\n                                                <div class=\"sw-theme-manager-detail__info-image\" :style=\"previewMedia\"></div>\n                                            {% endblock %}\n\n                                            {% block sw_theme_manager_detail_content_info_content %}\n                                                <div class=\"sw-theme-manager-detail__info-content\">\n                                                    <div class=\"sw-theme-manager-detail__info-name\">{{ theme.name }}</div>\n                                                    <div class=\"sw-theme-manager-detail__info-author\">{{ theme.author }}</div>\n                                                    <div v-if=\"theme.description\" class=\"sw-theme-manager-detail__info-descr\">\n                                                        <p class=\"sw-theme-manager-detail__info-descr-title\">\n                                                            {{ $tc('sw-theme-manager.detail.description') }}:\n                                                        </p>\n                                                        <p>{{ theme.description |truncate(140) }}</p>\n                                                    </div>\n\n                                                    <sw-entity-multi-select\n                                                        v-model:entityCollection=\"theme.salesChannels\"\n                                                        class=\"sw-theme-manager-detail__saleschannels-select\"\n                                                        :label=\"$tc('sw-theme-manager.detail.salesChannel')\"\n                                                        :disabled=\"!acl.can('theme.editor')\"\n                                                        :helpText=\"isDefaultTheme ? $tc('sw-theme-manager.detail.salesChannelHelpText') : null\"\n                                                        :placeholder=\"$tc('sw-theme-manager.detail.placeholder.selectSalesChannel')\"\n                                                        :selectionDisablingMethod=\"selectionDisablingMethod\">\n                                                        <template #result-item=\"{ item, index }\">\n                                                            <span v-if=\"!isThemeCompatible(item)\"></span>\n                                                        </template>\n                                                    </sw-entity-multi-select>\n\n                                                </div>\n                                            {% endblock %}\n                                        </div>\n\n                                        {% block sw_theme_manager_detail_content_info_context_button %}\n                                            <sw-context-button\n                                                class=\"sw-theme-manager-detail__context-button\"\n                                                :zIndex=\"1100\"\n                                            >\n\n                                                {% block sw_theme_manager_detail_context_button_option_rename %}\n                                                    <sw-context-menu-item\n                                                        @click=\"onRenameTheme(theme)\"\n                                                        :disabled=\"!acl.can('theme.editor')\">\n                                                        {{ $tc('sw-theme-manager.actions.rename') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n\n                                                {% block sw_theme_manager_detail_context_button_option_create %}\n                                                    <sw-context-menu-item\n                                                        @click=\"onDuplicateTheme(theme)\"\n                                                        v-if=\"theme.technicalName\"\n                                                        :disabled=\"!acl.can('theme.creator')\">\n                                                        {{ $tc('sw-theme-manager.actions.duplicate') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n\n                                                {% block sw_theme_manager_detail_context_button_option_reset %}\n                                                    <sw-context-menu-item\n                                                        @click=\"onReset\"\n                                                        v-if=\"theme.configValues !== null\"\n                                                        :disabled=\"!acl.can('theme.editor')\"\n                                                        variant=\"danger\">\n                                                        {{ $tc('sw-theme-manager.actions.buttonReset') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n\n                                                {% block sw_theme_manager_detail_context_button_option_delete %}\n                                                    <sw-context-menu-item\n                                                        v-if=\"!theme.technicalName\"\n                                                        :disabled=\"!acl.can('theme.deleter') || theme.salesChannels.length > 0\"\n                                                        v-tooltip.right=\"deleteDisabledToolTip\"\n                                                        class=\"sw-theme-manager-detail__option-delete\"\n                                                        variant=\"danger\"\n                                                        @click=\"onDeleteTheme(theme)\">\n                                                        {{ $tc('sw-theme-manager.actions.delete') }}\n                                                    </sw-context-menu-item>\n                                                {% endblock %}\n                                            </sw-context-button>\n                                        {% endblock %}\n                                    </sw-card>\n                                {% endblock %}\n                            </template>\n\n                            <template v-for=\"(tab, tabName) in structuredThemeFields.tabs\">\n                                <template v-if=\"tabName === active\">\n                                    {% block sw_theme_manager_detail_content_areas %}\n                                        <sw-card v-for=\"(block, blockName) in tab.blocks\"\n                                                 :key=\"blockName\"\n                                                 class=\"sw-theme-manager-detail__area\"\n                                                 positionIdentifier=\"theme-manager-detail-content\"\n                                                 :title=\"block.label\">\n\n                                            {% block sw_theme_manager_detail_content_sections %}\n                                                <sw-card-section v-for=\"(section, sectionName) in block.sections\"\n                                                                 :key=\"sectionName\">\n                                                    <div v-if=\"section.label\" class=\"sw-theme-manager-detail__content--section_title\">\n                                                        {{ section.label }}\n                                                    </div>\n\n                                                    {% block sw_theme_manager_detail_content_fields %}\n                                                        <sw-container class=\"sw-theme-manager-detail__content--section_field\">\n                                                            <div v-for=\"(field, fieldName) in section.fields\"\n                                                                 :key=\"fieldName\"\n                                                                 class=\"sw-theme-manager-detail__content--section_field\"\n                                                                 :class=\"{'sw-theme-manager-detail__content--section_field-full-width': field.fullWidth}\">\n                                                                <template v-if=\"themeConfig[fieldName] && baseThemeConfig[fieldName]\">\n                                                                    <template v-if=\"mapSwFieldTypes(field.type) === 'select'\">\n                                                                        <sw-inherit-wrapper\n                                                                            :class=\"'sw-field-id-' + fieldName\"\n                                                                            v-model:value=\"currentThemeConfig[fieldName].value\"\n                                                                            :ref=\"`wrapper-${fieldName}`\"\n                                                                            :has-parent=\"theme.baseConfig?.fields?.[fieldName] == null\"\n                                                                            :inherited-value=\"baseThemeConfig[fieldName].value\"\n                                                                            :label=\"!field.label ? '' : field.label\"\n                                                                            :customInheritationCheckFunction=\"checkInheritanceFunction(fieldName)\"\n                                                                            @update:value=\"handleInheritanceInput($event, fieldName)\"\n                                                                        >\n                                                                            <template #content=\"{ currentValue, updateCurrentValue, isInherited }\">\n                                                                                <sw-select-field\n                                                                                    v-model:value=\"currentValue\"\n                                                                                    :placeholder=\"field.placeholder\"\n                                                                                    :options=\"field.options\"\n                                                                                    :helpText=\"!field.helpText ? null : field.helpText\"\n                                                                                    :disabled=\"isInherited || !acl.can('theme.editor')\"\n                                                                                    @update:value=\"updateCurrentValue\"\n                                                                                >\n                                                                                </sw-select-field>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n\n                                                                    <template v-else-if=\"field.type === 'url'\">\n                                                                        <sw-inherit-wrapper\n                                                                            :class=\"'sw-field-id-' + fieldName\"\n                                                                            v-model:value=\"currentThemeConfig[fieldName].value\"\n                                                                            :ref=\"`wrapper-${fieldName}`\"\n                                                                            :has-parent=\"theme.baseConfig?.fields?.[fieldName] == null\"\n                                                                            :inherited-value=\"baseThemeConfig[fieldName].value\"\n                                                                            :label=\"!field.label ? '' : field.label\"\n                                                                            :customInheritationCheckFunction=\"checkInheritanceFunction(fieldName)\"\n                                                                            @update:value=\"handleInheritanceInput($event, fieldName)\"\n                                                                        >\n                                                                            <template #content=\"{ currentValue, updateCurrentValue, isInherited }\">\n                                                                                <sw-url-field\n                                                                                    v-model:value=\"currentValue\"\n                                                                                    :helpText=\"!field.helpText ? null : field.helpText\"\n                                                                                    :disabled=\"isInherited || !acl.can('theme.editor')\"\n                                                                                    @update:value=\"updateCurrentValue\"\n                                                                                >\n                                                                                </sw-url-field>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n                                                                    <div v-else-if=\"field.type === 'media'\">\n\n                                                                        <sw-upload-listener\n                                                                            :uploadTag=\"tabName + '-' + blockName + '-' + sectionName + '-' + fieldName\"\n                                                                            @media-upload-finish=\"successfulUpload($event, currentThemeConfig[fieldName])\"\n                                                                            autoUpload>\n                                                                        </sw-upload-listener>\n\n                                                                        <sw-inherit-wrapper\n                                                                            :class=\"'sw-field-id-' + fieldName\"\n                                                                            v-model:value=\"currentThemeConfig[fieldName].value\"\n                                                                            :ref=\"`wrapper-${fieldName}`\"\n                                                                            :has-parent=\"theme.baseConfig?.fields?.[fieldName] == null\"\n                                                                            :inherited-value=\"baseThemeConfig[fieldName].value\"\n                                                                            :label=\"!field.label ? '' : field.label\"\n                                                                            :customInheritationCheckFunction=\"checkInheritanceFunction(fieldName)\"\n                                                                            @update:value=\"handleInheritanceInput($event, fieldName)\"\n                                                                        >\n                                                                            <template #content=\"{ currentValue, updateCurrentValue, isInherited, removeInheritance }\">\n                                                                                <sw-media-upload-v2\n                                                                                    :source=\"currentValue\"\n                                                                                    :uploadTag=\"tabName + '-' + blockName + '-' + sectionName + '-' + fieldName\"\n                                                                                    :helpText=\"!field.helpText ? null : field.helpText\"\n                                                                                    :ref=\"tabName + '-' + blockName + '-' + sectionName + '-' + fieldName\"\n                                                                                    :defaultFolder=\"themeRepository.schema.entity\"\n                                                                                    :allowMultiSelect=\"false\"\n                                                                                    :disabled=\"!acl.can('theme.editor') || themeConfig[fieldName].editable === false\"\n                                                                                    @media-drop=\"onDropMedia($event, currentThemeConfig[fieldName])\"\n                                                                                    @media-upload-sidebar-open=\"openMediaSidebar()\"\n                                                                                    @media-upload-remove-image=\"removeMediaItem(fieldName, updateCurrentValue, isInherited, removeInheritance)\">\n                                                                                </sw-media-upload-v2>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </div>\n\n                                                                    <template v-else-if=\"mapSwFieldTypes(field.type)\">\n                                                                        <sw-inherit-wrapper\n                                                                            :class=\"'sw-field-id-' + fieldName\"\n                                                                            v-model:value=\"currentThemeConfig[fieldName].value\"\n                                                                            :ref=\"`wrapper-${fieldName}`\"\n                                                                            :has-parent=\"theme.baseConfig?.fields?.[fieldName] == null\"\n                                                                            :inherited-value=\"baseThemeConfig[fieldName].value\"\n                                                                            :label=\"!field.label ? '' : field.label\"\n                                                                            :customInheritationCheckFunction=\"checkInheritanceFunction(fieldName)\"\n                                                                            @update:value=\"handleInheritanceInput($event, fieldName)\"\n                                                                        >\n                                                                            <template #content=\"{ currentValue, updateCurrentValue, isInherited }\">\n                                                                                <sw-colorpicker\n                                                                                    v-if=\"mapSwFieldTypes(field.type) === 'colorpicker'\"\n                                                                                    :helpText=\"!field.helpText ? null : field.helpText\"\n                                                                                    :disabled=\"isInherited || !acl.can('theme.editor') || themeConfig[fieldName].editable === false\"\n                                                                                    :value=\"currentValue\"\n                                                                                    zIndex=\"100\"\n                                                                                    @update:value=\"updateCurrentValue\"\n                                                                                />\n\n                                                                                <sw-text-field\n                                                                                    v-else-if=\"mapSwFieldTypes(field.type) === 'text' || mapSwFieldTypes(field.type) === null\"\n                                                                                    :helpText=\"!field.helpText ? null : field.helpText\"\n                                                                                    :disabled=\"isInherited || !acl.can('theme.editor') || themeConfig[fieldName].editable === false\"\n                                                                                    :value=\"currentValue | cssValue\"\n                                                                                    @update:value=\"updateCurrentValue\"\n                                                                                />\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n\n                                                                    <template v-else-if=\"themeConfig[fieldName].editable !== false\">\n                                                                        <sw-inherit-wrapper\n                                                                            :class=\"'sw-field-id-' + fieldName\"\n                                                                            v-model:value=\"currentThemeConfig[fieldName].value\"\n                                                                            :ref=\"`wrapper-${fieldName}`\"\n                                                                            :has-parent=\"theme.baseConfig?.fields?.[fieldName] == null\"\n                                                                            :inherited-value=\"baseThemeConfig[fieldName].value\"\n                                                                            :label=\"!field.label ? '' : field.label\"\n                                                                            :customInheritationCheckFunction=\"checkInheritanceFunction(fieldName)\"\n                                                                            @update:value=\"handleInheritanceInput($event, fieldName)\"\n                                                                        >\n                                                                            <template #content=\"{ currentValue, updateCurrentValue, isInherited }\">\n                                                                                <sw-form-field-renderer\n                                                                                    v-bind=\"getBind(field)\"\n                                                                                    :value=\"currentValue\"\n                                                                                    :disabled=\"isInherited || !acl.can('theme.editor')\"\n                                                                                    @update:value=\"updateCurrentValue\"\n                                                                                >\n                                                                                </sw-form-field-renderer>\n                                                                            </template>\n                                                                        </sw-inherit-wrapper>\n                                                                    </template>\n                                                                </template>\n                                                            </div>\n                                                        </sw-container>\n                                                    {% endblock %}\n                                                </sw-card-section>\n                                            {% endblock %}\n                                        </sw-card>\n                                    {% endblock %}\n                                </template>\n                            </template>\n                        </template>\n                    </sw-tabs>\n                </div>\n            {% endblock %}\n\n            {% block sw_theme_manager_reset_modal %}\n                <sw-modal v-if=\"showResetModal\"\n                          @modal-close=\"onCloseResetModal\"\n                          :title=\"$tc('sw-theme-manager.modal.modalTitleReset')\"\n                          variant=\"small\">\n\n                    {% block sw_theme_manager_reset_modal_reset_text %}\n                        <p class=\"sw_theme_manager__confirm-reset-text\">\n                            {{ $tc('sw-theme-manager.modal.modalTextResetInfo') }}\n                        </p>\n                        <p v-if=\"theme.salesChannels.length > 0\" class=\"sw_theme_manager__confirm-reset-text\">\n                            {{ $tc('sw-theme-manager.modal.modalTextResetAssigned') }}\n                        </p>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_reset_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_reset_modal_cancel %}\n                                <sw-button @click=\"onCloseResetModal\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.actions.buttonCancel') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_reset_modal_confirm %}\n                                <sw-button @click=\"onConfirmThemeReset\"\n                                           variant=\"danger\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.actions.buttonReset') }}\n                                </sw-button>\n                            {% endblock %}\n                     </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_delete_modal %}\n                <sw-modal v-if=\"showDeleteModal\"\n                          @modal-close=\"onCloseDeleteModal\"\n                          :title=\"$tc('global.default.warning')\"\n                          variant=\"small\">\n\n                    {% block sw_theme_manager_detail_delete_modal_info %}\n                        <div class=\"sw_theme_manager__confirm-delete-text\">\n                            {{ $tc('sw-theme-manager.modal.textDeleteInfo', 0,\n                            { themeName: theme.name }) }}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_delete_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_delete_modal_cancel %}\n                                <sw-button @click=\"onCloseDeleteModal\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_delete_modal_confirm %}\n                                <sw-button @click=\"onConfirmThemeDelete\"\n                                           variant=\"danger\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonDelete') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_save_modal %}\n                <sw-modal v-if=\"showSaveModal\"\n                          class=\"sw-theme-manager-detail-modal\"\n                          @modal-close=\"onCloseSaveModal\"\n                          :title=\"$tc('sw-theme-manager.modal.modalTitleSave')\"\n                          variant=\"large\">\n\n                    {% block sw_theme_manager_detail_save_modal_info %}\n                        <div class=\"sw_theme_manager__confirm-save-text\">\n                            {{ $tc('sw-theme-manager.modal.textSaveInfo', 0,\n                            { themeName: theme.name }) }}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_save_modal_already_assigned_warning %}\n                        <sw-alert\n                            v-if=\"overwrittenSalesChannelAssignments.length > 0\"\n                            variant=\"warning\">\n\n                            <div class=\"sw-theme-manager-detail__sales-channel-warning\" v-if=\"overwrittenSalesChannelAssignments.length === 1\">\n                                <span v-html=\"$tc('sw-theme-manager.modal.salesChannelAlreadyAssignedModal.descriptionSingle', 0, { newThemeName: theme.name })\"></span>\n                            </div>\n\n                            <div class=\"sw-theme-manager-detail__sales-channel-warning\" v-else>\n                                <span v-html=\"$tc('sw-theme-manager.modal.salesChannelAlreadyAssignedModal.descriptionMultiple', 0, { newThemeName: theme.name })\"></span>\n                            </div>\n\n                            <div v-for=\"salesChannel in overwrittenSalesChannelAssignments\">\n                                <b>{{ salesChannel.oldThemeName }}</b> ({{ salesChannel.salesChannelName }})\n                            </div>\n                        </sw-alert>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_save_modal_removed_warning %}\n                        <sw-alert\n                            v-if=\"removedSalesChannels.length > 0\"\n                            variant=\"warning\">\n                            <div class=\"sw-theme-manager-detail__sales-channel-warning\" v-if=\"removedSalesChannels.length === 1\">\n                                <span v-html=\"$tc('sw-theme-manager.modal.salesChannelRemovedModal.descriptionSingle', 0, { defaultThemeName: defaultTheme.name })\"></span>\n                            </div>\n\n                            <div class=\"sw-theme-manager-detail__sales-channel-warning\" v-else>\n                                <span v-html=\"$tc('sw-theme-manager.modal.salesChannelRemovedModal.descriptionMultiple', 0, { defaultThemeName: defaultTheme.name })\"></span>\n                            </div>\n\n                            <div v-for=\"salesChannel in removedSalesChannels\">\n                                <b>{{ theme.name }}</b> ({{ salesChannel.name }})\n                            </div>\n                        </sw-alert>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_save_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_save_modal_cancel %}\n                                <sw-button @click=\"onCloseSaveModal\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_save_modal_confirm %}\n                                <sw-button @click=\"onConfirmThemeSave\"\n                                           variant=\"primary\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonSave') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_duplicate_modal %}\n                <sw-modal v-if=\"showDuplicateModal\"\n                          class=\"sw_theme_manager__duplicate-modal\"\n                          @modal-close=\"onCloseDuplicateModal\"\n                          :title=\"$tc('sw-theme-manager.modal.modalTitleDuplicate')\"\n                          variant=\"small\">\n\n                    {% block sw_theme_manager_detail_duplicate_modal_name_input %}\n                        <div class=\"sw_theme_manager__duplicate-info\">\n                            {{ $tc('sw-theme-manager.modal.textDuplicateInfo') }}\n                        </div>\n\n                        <sw-text-field\n                            v-model:value=\"newThemeName\"\n                            name=\"sw-field--duplicate-theme-name\"\n                            :label=\"$tc('sw-theme-manager.modal.labelDuplicateThemeName')\"\n                            :placeholder=\"$tc('sw-theme-manager.modal.placeholderDuplicateThemeName')\"\n                        />\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_duplicate_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_duplicate_modal_cancel %}\n                                <sw-button @click=\"onCloseDuplicateModal\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_duplicate_modal_confirm %}\n                                <sw-button @click=\"onConfirmThemeDuplicate\"\n                                           variant=\"primary\"\n                                           :disabled=\"newThemeName.length < 3\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonDuplicateTheme') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_rename_modal %}\n                <sw-modal v-if=\"showRenameModal\"\n                          class=\"sw_theme_manager__rename-modal\"\n                          @modal-close=\"onCloseRenameModal\"\n                          :title=\"$tc('sw-theme-manager.modal.modalTitleRename')\"\n                          variant=\"small\">\n\n                    {% block sw_theme_manager_detail_rename_modal_name_input %}\n                        <div class=\"sw_theme_manager__rename-info\">\n                            {{ $tc('sw-theme-manager.modal.textRenameInfo') }}\n                        </div>\n\n                        <sw-text-field\n                            v-model:value=\"newThemeName\"\n                            name=\"sw-field--rename-theme-name\"\n                            :label=\"$tc('sw-theme-manager.modal.labelRenameThemeName')\"\n                            :placeholder=\"$tc('sw-theme-manager.modal.placeholderRenameThemeName')\"\n                        />\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_rename_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_rename_modal_cancel %}\n                                <sw-button @click=\"onCloseRenameModal\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_theme_manager_detail_rename_modal_confirm %}\n                                <sw-button @click=\"onConfirmThemeRename\"\n                                           variant=\"primary\"\n                                           :disabled=\"newThemeName.length < 3\"\n                                           size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonRenameTheme') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n\n            {% block sw_theme_manager_detail_error_modal %}\n                <sw-modal v-if=\"errorModalMessage\"\n                          @modal-close=\"onCloseErrorModal\"\n                          :title=\"$tc('sw-theme-manager.modal.errorModalTitle')\"\n                          variant=\"large\">\n\n                    {% block sw_theme_manager_detail_error_modal_message %}\n                        <pre style=\"white-space: pre-line;\">{{ errorModalMessage }}</pre>\n                    {% endblock %}\n\n                    {% block sw_theme_manager_detail_error_modal_footer %}\n                        <template #modal-footer>\n                            {% block sw_theme_manager_detail_error_modal_close %}\n                                <sw-button @click=\"onCloseErrorModal\" size=\"small\">\n                                    {{ $tc('sw-theme-manager.modal.buttonClose') }}\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-modal>\n            {% endblock %}\n        </template>\n\n        {% block sw_theme_manager_detail_sidebar %}\n            <template #sidebar>\n                <sw-sidebar :propagateWidth=\"true\">\n                    {% block sw_theme_manager_detail_sidebar_media %}\n                        <sw-sidebar-media-item\n                            ref=\"mediaSidebarItem\"\n                            :initialFolderId=\"defaultMediaFolderId\">\n                            <template #context-menu-items=\"media\">\n                                {% block sw_theme_manager_detail_sidebar_media_items %}\n                                    <template v-if=\"shouldShowContent\">\n                                        <template v-for=\"(tab, tabName) in structuredThemeFields.tabs\">\n                                            <template v-for=\"block in tab.blocks\">\n                                                <template v-for=\"section in block.sections\">\n                                                    <template v-for=\"(field, fieldName) in section.fields\">\n                                                        <sw-context-menu-item v-if=\"themeConfig[fieldName] && field.type === 'media'\"\n                                                                              :key=\"fieldName\"\n                                                                              @click=\"onAddMediaToTheme(media.mediaItem, currentThemeConfig[fieldName])\">\n                                                            {{ $tc('sw-theme-manager.modal.addToMediaLabel', 0, { name: field.label }) }}\n                                                        </sw-context-menu-item>\n                                                    </template>\n                                                </template>\n                                            </template>\n                                        </template>\n                                    </template>\n                                {% endblock %}\n                            </template>\n                        </sw-sidebar-media-item>\n                    {% endblock %}\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n","import template from './sw-theme-manager-detail.html.twig';\nimport './sw-theme-manager-detail.scss';\n/**\n * @package discovery\n */\n\nconst { Component, Mixin } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\nconst { getObjectDiff, cloneDeep, deepMergeObject } = Shopware.Utils.object;\nconst { isArray } = Shopware.Utils.types;\n\nComponent.register('sw-theme-manager-detail', {\n    template,\n\n    inject: ['acl', 'feature'],\n\n    mixins: [\n        Mixin.getByName('theme'),\n        Mixin.getByName('notification')\n    ],\n\n    filters: {\n        cssValue: function (value) {\n            // Be careful what to filter here because many characters are allowed\n            if (!value) return ''\n            value = value.toString()\n            return value.replace(/`|´/g, '');\n        }\n    },\n\n    data() {\n        return {\n            theme: null,\n            parentTheme: false,\n            defaultMediaFolderId: null,\n            structuredThemeFields: {},\n            themeConfig: {},\n            currentThemeConfig: {},\n            showResetModal: false,\n            showSaveModal: false,\n            errorModalMessage: null,\n            baseThemeConfig: {},\n            currentThemeConfigInitial: {},\n            inheritanceChanged: [],\n            isLoading: false,\n            isSaveSuccessful: false,\n            mappedFields: {\n                color: 'colorpicker',\n                fontFamily: 'text'\n            },\n            defaultTheme: null,\n            themeCompatibleSalesChannels: [],\n            salesChannelsWithTheme: null,\n            newAssignedSalesChannels: [],\n            overwrittenSalesChannelAssignments: [],\n            removedSalesChannels: []\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.themeName)\n        };\n    },\n\n    computed: {\n        themeName() {\n            if (this.theme) {\n                return this.theme.name;\n            }\n\n            return '';\n        },\n\n        isDerived() {\n            if (!this.theme) {\n                return false;\n            }\n            if (this.theme.technicalName === 'Storefront') {\n                return false;\n            }\n            if (this.parentTheme) {\n                return true;\n            }\n            if (\n                isArray(this.theme?.baseConfig?.configInheritance) &&\n                !this.theme.baseConfig.configInheritance.includes('@Storefront')\n            ) {\n                return false;\n            }\n            return true;\n        },\n\n        mediaRepository() {\n            return this.repositoryFactory.create('media');\n        },\n\n        defaultFolderRepository() {\n            return this.repositoryFactory.create('media_default_folder');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        previewMedia() {\n            if (this.theme && this.theme.previewMedia && this.theme.previewMedia.id && this.theme.previewMedia.url) {\n                return {\n                    'background-image': `url('${this.theme.previewMedia.url}')`,\n                    'background-size': 'cover'\n                };\n            }\n\n            return {\n                'background-image': this.defaultThemeAsset\n            };\n        },\n\n        defaultThemeAsset() {\n            const assetFilter = Shopware.Filter.getByName('asset');\n            const previewUrl = assetFilter('administration/static/img/theme/default_theme_preview.jpg');\n\n            return `url(${previewUrl})`;\n        },\n\n        deleteDisabledToolTip() {\n            return {\n                showDelay: 300,\n                message: this.$tc('sw-theme-manager.actions.deleteDisabledToolTip'),\n                disabled: this.theme.salesChannels.length === 0\n            };\n        },\n\n        themeId() {\n            return this.$route.params.id;\n        },\n\n        shouldShowContent() {\n            return Object.values(this.structuredThemeFields).length > 0 && !this.isLoading;\n        },\n\n        hasMoreThanOneTab() {\n            return Object.values(this.structuredThemeFields.tabs).length > 1;\n        },\n\n        isDefaultTheme() {\n            return this.theme.id === this.defaultTheme.id;\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    watch: {\n        themeId() {\n            this.getTheme();\n        }\n    },\n\n    methods: {\n        createdComponent() {\n            this.getTheme();\n            this.setPageContext();\n        },\n\n        getTheme() {\n            if (!this.themeId) {\n                return;\n            }\n\n            this.isLoading = true;\n\n            const criteria = new Criteria();\n            criteria.addAssociation('previewMedia');\n            criteria.addAssociation('salesChannels');\n\n            this.themeRepository.get(this.themeId, Shopware.Context.api, criteria).then((response) => {\n                this.theme = response;\n                this.getThemeConfig();\n\n                if (this.theme.parentThemeId) {\n                    this.getParentTheme();\n                }\n\n                this.isLoading = false;\n            });\n        },\n\n        checkInheritanceFunction(fieldName) {\n            return () => this.currentThemeConfig[fieldName].isInherited;\n        },\n\n        handleInheritanceInput(value, fieldName) {\n            this.currentThemeConfig[fieldName].isInherited = value === null;\n        },\n\n        getThemeConfig() {\n            this.isLoading = true;\n\n            if (!this.theme || !this.themeId) {\n                return;\n            }\n\n            this.structuredThemeFields = {};\n            this.currentThemeConfig = {};\n            this.themeConfig = {};\n            this.baseThemeConfig = {};\n            this.currentThemeConfigInitial = {};\n\n            this.themeService.getStructuredFields(this.themeId).then((fields) => {\n                this.structuredThemeFields = fields;\n            });\n\n            this.themeService.getConfiguration(this.themeId).then((config) => {\n                this.currentThemeConfig = config.currentFields;\n                this.currentThemeConfigInitial = cloneDeep(this.currentThemeConfig);\n                this.themeConfig = config.fields;\n                this.baseThemeConfig = cloneDeep(config.baseThemeFields);\n                this.isLoading = false;\n            });\n        },\n\n        setPageContext() {\n            this.getDefaultTheme().then((defaultTheme) => {\n                this.defaultTheme = defaultTheme;\n            });\n\n            this.getDefaultFolderId().then((folderId) => {\n                this.defaultMediaFolderId = folderId;\n            });\n\n            this.getThemeCompatibleSalesChannels().then((ids) => {\n                this.themeCompatibleSalesChannels = ids;\n            });\n\n            this.getSalesChannelsWithTheme().then((salesChannels) => {\n                this.salesChannelsWithTheme = salesChannels;\n            });\n        },\n\n        getParentTheme() {\n            this.themeRepository.get(this.theme.parentThemeId).then((parentTheme) => {\n                this.parentTheme = parentTheme;\n            });\n        },\n\n        openMediaSidebar() {\n            this.$refs.mediaSidebarItem.openContent();\n        },\n\n        onAddMediaToTheme(mediaItem, context) {\n            this.setMediaItem(mediaItem, context);\n        },\n\n        onDropMedia(dragData, context) {\n            this.setMediaItem(dragData, context);\n        },\n\n        setMediaItem(mediaItem, context) {\n            context.value = mediaItem.id;\n        },\n\n        successfulUpload(mediaItem, context) {\n            this.mediaRepository\n                .get(mediaItem.targetId)\n                .then((media) => {\n                    this.setMediaItem(media, context);\n                    return true;\n                });\n        },\n\n        removeMediaItem(field, updateCurrentValue, isInherited, removeInheritance) {\n            this.currentThemeConfig[field].value = null;\n            this.themeConfig[field].value = null;\n            if (isInherited) {\n                updateCurrentValue(null);\n            } else {\n                removeInheritance(null);\n            }\n            this.currentThemeConfigInitial[field].value = false;\n        },\n\n        restoreMediaInheritance(currentValue, value) {\n            return currentValue;\n        },\n\n        onReset() {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            if (this.theme.configValues === null) {\n                return;\n            }\n\n            this.showResetModal = true;\n        },\n\n        onCloseResetModal() {\n            this.showResetModal = false;\n        },\n\n        onCloseErrorModal() {\n            this.errorModalMessage = null;\n        },\n\n        onConfirmThemeReset() {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            this.themeService.resetTheme(this.themeId).then(() => {\n                this.getTheme();\n            });\n\n            this.showResetModal = false;\n        },\n\n        onSave() {\n            this.findChangedSalesChannels();\n\n            if (this.theme.salesChannels.length > 0 || this.removedSalesChannels.length > 0) {\n                this.showSaveModal = true;\n\n                return;\n            }\n\n            return this.onSaveTheme();\n        },\n\n        onSaveClean() {\n            this.findChangedSalesChannels();\n\n            if (this.theme.salesChannels.length > 0 || this.removedSalesChannels.length > 0) {\n                this.showSaveModal = true;\n\n                return;\n            }\n\n            return this.onSaveTheme(true);\n        },\n\n        onCloseSaveModal() {\n            this.showSaveModal = false;\n        },\n\n        onConfirmThemeSave() {\n            this.onSaveTheme();\n            this.showSaveModal = false;\n        },\n\n        onValidate() {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            this.isLoading = true;\n            const allValues = this.getCurrentChangeset();\n            this.removeInheritedFromChangeset(allValues);\n\n            return this.themeService.validateFields(deepMergeObject(this.themeConfig, allValues)).then(() => {\n                this.isLoading = false;\n                this.createNotificationSuccess({\n                    title: this.$tc('sw-theme-manager.detail.validate.success'),\n                    message: this.$tc('sw-theme-manager.detail.validate.successMessage'),\n                    autoClose: true,\n                });\n            }).catch((error) => {\n                this.isLoading = false;\n\n                const errorObject = error.response.data.errors[0];\n                if (errorObject.code === 'THEME__INVALID_SCSS_VAR') {\n                    this.createNotificationError({\n                        title: this.$tc('sw-theme-manager.detail.validate.failed'),\n                        message: this.$tc('sw-theme-manager.detail.validate.failedMessage'),\n                        autoClose: false,\n                        actions: [{\n                            label: this.$tc('sw-theme-manager.detail.showFullError'),\n                            method: function showFullError() {\n                                this.errorModalMessage = errorObject.detail;\n                            }.bind(this),\n                        }],\n                    });\n\n                    return;\n                }\n\n                this.createNotificationError({\n                    title: this.$tc('global.default.error'),\n                    message: errorObject.detail ?? error.toString(),\n                    autoClose: true,\n                });\n            });\n        },\n\n        onSaveTheme(clean = false) {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            this.isSaveSuccessful = false;\n            this.isLoading = true;\n\n            return Promise.all([this.saveSalesChannels(), this.saveThemeConfig(clean)]).finally(() => {\n                this.getTheme();\n            }).catch((error) => {\n                this.isLoading = false;\n\n                const errorObject = error.response.data.errors[0];\n                if (errorObject.code === 'THEME__COMPILING_ERROR' || errorObject.code === 'THEME__INVALID_SCSS_VAR') {\n                    this.createNotificationError({\n                        title: this.$tc('sw-theme-manager.detail.error.themeCompile.title'),\n                        message: this.$tc('sw-theme-manager.detail.error.themeCompile.message'),\n                        autoClose: false,\n                        actions: [{\n                            label: this.$tc('sw-theme-manager.detail.showFullError'),\n                            method: function showFullError() {\n                                this.errorModalMessage = errorObject.detail;\n                            }.bind(this),\n                        }],\n                    });\n\n                    return;\n                }\n\n                this.createNotificationError({\n                    title: this.$tc('global.default.error'),\n                    message: errorObject.detail ?? error.toString(),\n                    autoClose: true,\n                });\n            });\n        },\n\n        saveSalesChannels() {\n            const promises = [];\n\n            if (this.newAssignedSalesChannels.length > 0) {\n                this.newAssignedSalesChannels.forEach((salesChannelId) => {\n                    promises.push(this.themeService.assignTheme(this.themeId, salesChannelId));\n                });\n            }\n\n            if (this.removedSalesChannels.length > 0) {\n                this.removedSalesChannels.forEach((salesChannel) => {\n                    promises.push(this.themeService.assignTheme(this.defaultTheme.id, salesChannel.id));\n                });\n            }\n\n            return Promise.all(promises);\n        },\n\n        findChangedSalesChannels() {\n            this.newAssignedSalesChannels = [];\n            this.removedSalesChannels = [];\n            this.overwrittenSalesChannelAssignments = [];\n\n            const diff = this.themeRepository.getSyncChangeset([this.theme]);\n\n            if (diff.changeset.length > 0 && diff.changeset[0].changes.hasOwnProperty('salesChannels')) {\n                this.findAddedSalesChannels(diff.changeset[0].changes.salesChannels);\n            }\n\n            if (diff.deletions.length > 0) {\n                this.findRemovedSalesChannels(diff.deletions);\n            }\n        },\n\n        findAddedSalesChannels(salesChannels) {\n            salesChannels.forEach((salesChannel) => {\n                this.newAssignedSalesChannels.push(salesChannel.id);\n\n                const overwrittenSalesChannel = this.salesChannelsWithTheme.get(salesChannel.id);\n                if (overwrittenSalesChannel !== null) {\n                    this.overwrittenSalesChannelAssignments.push({\n                        id: salesChannel.id,\n                        salesChannelName: this.theme.salesChannels.get(salesChannel.id).translated.name,\n                        oldThemeName: overwrittenSalesChannel.extensions.themes[0].name\n                    });\n                }\n            });\n        },\n\n        findRemovedSalesChannels(salesChannels) {\n            salesChannels.forEach((salesChannel) => {\n                this.removedSalesChannels.push({\n                    id: salesChannel.key,\n                    name: this.theme.getOrigin().salesChannels.get(salesChannel.key).translated.name\n                });\n            });\n        },\n\n        getCurrentChangeset(clean = false) {\n            // Get actual changes since load, then merge the changes into the full config set\n            const newValues = getObjectDiff(this.currentThemeConfigInitial, this.currentThemeConfig);\n            const allValues = this.theme.configValues ?? {};\n            Object.assign(allValues, newValues);\n            if (!clean) {\n                return allValues;\n            }\n\n            // Remove unused fields from changeset (defined by not set at all in the themeConfig or the type is not set)\n            const filtered = {};\n            for (const [key, value] of Object.entries(allValues)) {\n                if (\n                    this.themeConfig[key] === undefined\n                    || this.themeConfig[key].type === undefined\n                    || this.themeConfig[key].type === null\n                ) {\n                    continue;\n                }\n                filtered[key] = value;\n            }\n\n            return filtered;\n        },\n\n        removeInheritedFromChangeset(allValues) {\n            for (const key of Object.keys(allValues)) {\n                if (\n                    this.wrapperIsVisible(key)\n                    && this.$refs[`wrapper-${key}`][0].isInherited\n                ) {\n                    // Remove fields which are set to inheritance\n                    delete (allValues[`${key}`]);\n                    continue;\n                }\n                if (\n                    !this.wrapperIsVisible(key)\n                    && this.inheritanceChanged[`wrapper-${key}`] !== undefined\n                    && this.inheritanceChanged[`wrapper-${key}`] === true\n                ) {\n                    delete (allValues[`${key}`]);\n                }\n            }\n        },\n\n        wrapperIsVisible(key) {\n            return this.$refs[`wrapper-${key}`] !== undefined\n            && isArray(this.$refs[`wrapper-${key}`])\n            && this.$refs[`wrapper-${key}`][0] !== undefined;\n        },\n\n        saveThemeConfig(clean = false) {\n            const allValues = this.getCurrentChangeset(clean);\n            this.removeInheritedFromChangeset(allValues);\n\n            // Theme has to be reset, because inherited fields needs to be removed from the set\n            return this.themeService.resetTheme(this.themeId).then(() => {\n                return this.themeService.updateTheme(this.themeId, { config: allValues });\n            });\n        },\n\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        onSearch(value = null) {\n            if (!value.length || value.length <= 0) {\n                this.term = null;\n            } else {\n                this.term = value;\n            }\n        },\n\n        onChangeTab() {\n            for (const [key, item] of Object.entries(this.$refs)) {\n                if (\n                    key.startsWith('wrapper-')\n                    && item !== undefined\n                    && isArray(item)\n                    && item[0] !== undefined\n                ) {\n                    this.inheritanceChanged[key] = item[0].isInherited;\n                }\n            }\n        },\n\n        mapSwFieldTypes(field) {\n            return !this.mappedFields[field] ? null : this.mappedFields[field];\n        },\n\n        getThemeCompatibleSalesChannels() {\n            const criteria = new Criteria();\n            criteria.addAssociation('type');\n            criteria.addFilter(Criteria.equalsAny('type.name', ['Storefront', 'Headless']));\n\n            return this.salesChannelRepository.search(criteria).then((searchResult) => {\n                return searchResult.getIds();\n            });\n        },\n\n        getSalesChannelsWithTheme() {\n            const criteria = new Criteria();\n            criteria.addAssociation('themes');\n            criteria.addFilter(Criteria.not('or', [\n                Criteria.equals('themes.id', null),\n            ]));\n\n            return this.salesChannelRepository.search(criteria).then((searchResult) => {\n                return searchResult;\n            });\n        },\n\n        getDefaultFolderId() {\n            const criteria = new Criteria(1, 1);\n            criteria.addAssociation('folder');\n            criteria.addFilter(Criteria.equals('entity', this.themeRepository.schema.entity));\n\n            return this.defaultFolderRepository.search(criteria).then((searchResult) => {\n                const defaultFolder = searchResult.first();\n                if (defaultFolder.folder.id) {\n                    return defaultFolder.folder.id;\n                }\n\n                return null;\n            });\n        },\n\n        getDefaultTheme() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('technicalName', 'Storefront'));\n\n            return this.themeRepository.search(criteria).then((response) => {\n               return response.first();\n            });\n        },\n\n        /**\n         *  Convert the field to the right structure for the form field renderer:\n         *  bind: {\n         *      type: field.type,\n         *      config: anything else from field, including field.custom\n         *  }\n         */\n        getBind(field) {\n            const config = Object.assign({}, field);\n\n            if (config?.type !== 'switch' &&\n                config?.type !== 'checkbox' &&\n                config.custom?.componentName !== 'sw-switch-field' &&\n                config.custom?.componentName !== 'sw-checkbox-field'\n            ) {\n                config.label = '';\n            }\n\n            delete config.type;\n\n            Object.assign(config, config.custom);\n\n            if (config.custom?.componentName !== 'sw-switch-field' && config.custom?.componentName !== 'sw-checkbox-field') {\n                delete config.custom;\n            }\n\n            return { type: field.type, config: config };\n        },\n\n        selectionDisablingMethod(selection) {\n            if (!this.isDefaultTheme) {\n                return false;\n        }\n\n            return this.theme.getOrigin().salesChannels.has(selection.id);\n        },\n\n        isThemeCompatible(item) {\n            return this.themeCompatibleSalesChannels.includes(item.id);\n        },\n    }\n});\n","{% block sw_theme_manager_list %}\n    <sw-page class=\"sw-theme-list\">\n\n        {% block sw_theme_manager_list_search_bar %}\n            <template #search-bar>\n                <sw-search-bar :placeholder=\"$tc('sw-theme-manager.general.placeholderSearchBar')\"\n                               :initialSearchType=\"$tc('sw-theme-manager.general.mainMenuItemGeneral')\"\n                               @search=\"onSearch\">\n                </sw-search-bar>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_manager_list_toolbar %}\n            <template #smart-bar-header>\n                <h2> {{ $tc('sw-theme-manager.general.mainMenuItemGeneral') }}</h2>\n            </template>\n        {% endblock %}\n\n        {% block sw_theme_list_card_view %}\n            <template #content>\n                <sw-card-view>\n\n                    {% block sw_themes_list_listing %}\n                        <div class=\"sw-theme-list__content\">\n\n                            {% block sw_theme_list_listing_actions %}\n                                <div class=\"sw-theme-list__actions\">\n\n                                    {% block sw_theme_list_listing_title %}\n                                        <h3>{{ $tc('sw-theme-manager.general.mainMenuHeader') }}</h3>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_listing_actions_sorting %}\n                                        <div class=\"sw-theme-list__actions-sorting\">\n                                            <sw-select-field\n                                                name=\"sortType\"\n                                                :label=\"$tc('sw-theme-manager.sorting.labelSort')\"\n                                                :value=\"sortingConCat\"\n                                                @update:value=\"onSortingChanged\"\n                                                aside\n                                            >\n\n                                                {% block sw_theme_list_listing_actions_sorting_options %}\n                                                <option v-for=\"sortOption in sortOptions\"\n                                                        :value=\"sortOption.value\">\n                                                    {{ sortOption.name }}\n                                                </option>\n                                                {% endblock %}\n                                            </sw-select-field>\n                                        </div>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_listing_actions_mode %}\n                                        <div class=\"sw-theme-list__actions-mode\" @click=\"onListModeChange\">\n                                            <sw-icon name=\"regular-view-normal\" size=\"16\" v-if=\"listMode === 'grid'\"></sw-icon>\n                                            <sw-icon name=\"regular-view-grid\" size=\"16\" v-if=\"listMode === 'list'\"></sw-icon>\n                                        </div>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_theme_list_listing_list %}\n                                <div class=\"sw-theme-list__list\">\n\n                                    {% block sw_theme_list_listing_list_card %}\n                                        <sw-card class=\"sw-theme-list__list-card\" v-if=\"listMode === 'list'\">\n                                            <template #grid>\n\n                                                {% block sw_theme_list_listing_list_data_grid %}\n                                                    <sw-data-grid\n                                                        class=\"sw-theme-list__list-data-grid\"\n                                                        identifier=\"sw-theme-list\"\n                                                        :isLoading=\"isLoading\"\n                                                        :dataSource=\"themes\"\n                                                        :columns=\"columnConfig\"\n                                                        :skeletonItemAmount=\"limit\"\n                                                        :sortBy=\"sortBy\"\n                                                        :sortDirection=\"sortDirection\"\n                                                        :allowInlineEdit=\"false\"\n                                                        :allowColumnEdit=\"false\"\n                                                        :showSettings=\"false\"\n                                                        :showSelection=\"false\"\n                                                        @column-sort=\"onSortColumn\">\n\n                                                        {% block sw_theme_list_listing_list_data_grid_column_name %}\n                                                            <template #column-name=\"{ item }\">\n                                                                <sw-icon\n                                                                    name=\"regular-lock\"\n                                                                    class=\"sw-theme-list__icon-lock\"\n                                                                    v-if=\"item.technicalName\"\n                                                                    v-tooltip=\"lockToolTip\"\n                                                                    size=\"14\">\n                                                                </sw-icon>\n                                                                <router-link :to=\"{ name: 'sw.theme.manager.detail', params: { id: item.id } }\">\n                                                                    {{ item.name }}\n                                                                </router-link>\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_column_assignment %}\n                                                            <template #column-assignment=\"{ item }\">\n                                                                {{ item.salesChannels.length }}\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_column_created %}\n                                                            <template #column-createdAt=\"{ item }\">\n                                                                {{ dateFilter(item.createdAt, { hour: '2-digit', minute: '2-digit' }) }}\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_actions %}\n                                                            <template #actions=\"{ item }\">\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_edit %}\n                                                                    <sw-context-menu-item\n                                                                        class=\"sw-theme-list-item__option-edit\"\n                                                                        :routerLink=\"{ name: 'sw.theme.manager.detail', params: { id: item.id } }\">\n                                                                        {{ $tc('sw-theme-manager.themeListItem.edit') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_rename %}\n                                                                    <sw-context-menu-item\n                                                                        @click=\"onRenameTheme(item)\"\n                                                                        class=\"sw-theme-list-item__option-rename\"\n                                                                        :disabled=\"!acl.can('theme.editor')\">\n                                                                        {{ $tc('sw-theme-manager.themeListItem.rename') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_delete %}\n                                                                    <sw-context-menu-item\n                                                                        variant=\"danger\"\n                                                                        class=\"sw-theme-list-item__option-delete\"\n                                                                        :disabled=\"item.salesChannels.length > 0 || !acl.can('theme.deleter')\"\n                                                                        v-tooltip=\"deleteDisabledToolTip(item)\"\n                                                                        @click=\"onDeleteTheme(item)\"\n                                                                        v-if=\"!item.technicalName\">\n\n                                                                        {{ $tc('sw-theme-manager.themeListItem.delete') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n\n                                                                {% block sw_theme_list_listing_list_data_grid_actions_create %}\n                                                                    <sw-context-menu-item\n                                                                        v-if=\"item.technicalName\"\n                                                                        class=\"sw-theme-list-item__option-duplicate\"\n                                                                        @click=\"onDuplicateTheme(item)\"\n                                                                        :disabled=\"!acl.can('theme.creator')\">\n                                                                        {{ $tc('sw-theme-manager.actions.duplicate') }}\n                                                                    </sw-context-menu-item>\n                                                                {% endblock %}\n                                                            </template>\n                                                        {% endblock %}\n\n                                                        {% block sw_theme_list_listing_list_data_grid_pagination %}\n                                                            <template #pagination>\n                                                                <sw-pagination\n                                                                    :page=\"page\"\n                                                                    :limit=\"limit\"\n                                                                    :total=\"total\"\n                                                                    :steps=\"[5, 10, 25, 50]\"\n                                                                    @page-change=\"onPageChange\">\n                                                                </sw-pagination>\n                                                            </template>\n                                                        {% endblock %}\n                                                    </sw-data-grid>\n                                                {% endblock %}\n                                            </template>\n                                        </sw-card>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_listing_list_grid %}\n                                        <div class=\"sw-theme-list__list-grid\" v-if=\"listMode === 'grid'\">\n\n                                            {% block sw_theme_list_listing_list_grid_content %}\n                                                <div class=\"sw-theme-list__list-grid-content\">\n                                                    {% block sw_theme_list_listing_list_item %}\n                                                        <template v-if=\"!isLoading\">\n                                                            <sw-theme-list-item\n                                                            v-for=\"theme in themes\"\n                                                            :theme=\"theme\"\n                                                            :key=\"theme.id\"\n                                                            @preview-image-change=\"onPreviewChange\"\n                                                            @item-click=\"onListItemClick\">\n\n                                                            <template #contextMenu>\n                                                                <sw-context-button :zIndex=\"1100\"\n                                                                                   class=\"sw-theme-list-item__options\">\n\n                                                                    {% block sw_theme_list_listing_list_item_option_add_preview %}\n                                                                        <sw-context-menu-item\n                                                                            class=\"sw-theme-list-item__option-preview\"\n                                                                            @click=\"onPreviewChange(theme)\"\n                                                                            :disabled=\"!acl.can('theme.editor')\">\n                                                                            {{ $tc('sw-theme-manager.themeListItem.addPreviewImage') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_remove_preview %}\n                                                                        <sw-context-menu-item\n                                                                            class=\"sw-theme-list-item__option-preview sw-theme-list-item__option-preview-remove\"\n                                                                            v-if=\"theme.previewMediaId\"\n                                                                            variant=\"danger\"\n                                                                            @click=\"onPreviewImageRemove(theme)\"\n                                                                            :disabled=\"!acl.can('theme.editor')\">\n                                                                            {{ $tc('sw-theme-manager.themeListItem.removePreviewImage') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_rename %}\n                                                                        <sw-context-menu-item\n                                                                            @click=\"onRenameTheme(theme)\"\n                                                                            class=\"sw-theme-list-item__option-rename\"\n                                                                            :disabled=\"!acl.can('theme.editor')\">\n                                                                            {{ $tc('sw-theme-manager.themeListItem.rename') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_create %}\n                                                                        <sw-context-menu-item\n                                                                            v-if=\"theme.technicalName\"\n                                                                            class=\"sw-theme-list-item__option-duplicate\"\n                                                                            @click=\"onDuplicateTheme(theme)\"\n                                                                            :disabled=\"!acl.can('theme.creator')\">\n                                                                            {{ $tc('sw-theme-manager.actions.duplicate') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n\n                                                                    {% block sw_theme_list_listing_list_item_option_delete %}\n                                                                        <sw-context-menu-item\n                                                                            v-if=\"!theme.technicalName\"\n                                                                            class=\"sw-theme-list-item__option-delete\"\n                                                                            variant=\"danger\"\n                                                                            :disabled=\"theme.salesChannels.length > 0 || !acl.can('theme.deleter')\"\n                                                                            v-tooltip=\"deleteDisabledToolTip(theme)\"\n                                                                            @click=\"onDeleteTheme(theme)\">\n                                                                            {{ $tc('sw-theme-manager.themeListItem.delete') }}\n                                                                        </sw-context-menu-item>\n                                                                    {% endblock %}\n                                                                </sw-context-button>\n                                                            </template>\n                                                        </sw-theme-list-item>\n                                                        </template>\n\n                                                        <template v-else>\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                            <sw-skeleton variant=\"gallery\" />\n                                                        </template>\n                                                    {% endblock %}\n                                                </div>\n                                            {% endblock %}\n\n                                            {% block sw_theme_list_listing_pagination %}\n                                            <sw-pagination class=\"sw-theme-list__list-pagination\"\n                                                           v-if=\"!isLoading\"\n                                                           :page=\"page\"\n                                                           :limit=\"limit\"\n                                                           :total=\"total\"\n                                                           :steps=\"[9]\"\n                                                           @page-change=\"onPageChange\">\n                                            </sw-pagination>\n                                            {% endblock %}\n                                        </div>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_theme_list_media_modal %}\n                        <sw-media-modal-v2\n                            variant=\"regular\"\n                            v-if=\"showMediaModal\"\n                            :caption=\"$tc('sw-theme-manager.general.captionMediaUpload')\"\n                            entityContext=\"theme\"\n                            :allowMultiSelect=\"false\"\n                            @media-modal-selection-change=\"onPreviewImageChange\"\n                            @modal-close=\"onModalClose\">\n                        </sw-media-modal-v2>\n                    {% endblock %}\n\n                    {% block sw_theme_list_delete_modal %}\n                        <sw-modal v-if=\"showDeleteModal\"\n                                  @modal-close=\"onCloseDeleteModal\"\n                                  :title=\"$tc('global.default.warning')\"\n                                  variant=\"small\">\n\n                            {% block sw_theme_list_delete_modal_info %}\n                                <div class=\"sw_theme_manager__confirm-delete-text\">\n                                    {{ $tc('sw-theme-manager.modal.textDeleteInfo', 0,\n                                    { themeName: modalTheme.name }) }}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_theme_list_delete_modal_footer %}\n                                <template #modal-footer>\n                                    {% block sw_theme_list_delete_modal_cancel %}\n                                        <sw-button @click=\"onCloseDeleteModal\"\n                                                   size=\"small\">\n                                            {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                        </sw-button>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_delete_modal_confirm %}\n                                        <sw-button @click=\"onConfirmThemeDelete\"\n                                                   variant=\"danger\"\n                                                   size=\"small\">\n                                            {{ $tc('sw-theme-manager.modal.buttonDelete') }}\n                                        </sw-button>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-modal>\n                    {% endblock %}\n\n                    {% block sw_theme_list_duplicate_modal %}\n                        <sw-modal v-if=\"showDuplicateModal\"\n                                  class=\"sw_theme_manager__duplicate-modal\"\n                                  @modal-close=\"onCloseDuplicateModal\"\n                                  :title=\"$tc('sw-theme-manager.modal.modalTitleDuplicate')\"\n                                  variant=\"small\">\n\n                            {% block sw_theme_list_duplicate__modal_name_input %}\n                                <div class=\"sw_theme_manager__duplicate-info\">\n                                    {{ $tc('sw-theme-manager.modal.textDuplicateInfo') }}\n                                </div>\n\n                                <sw-text-field\n                                    v-model:value=\"newThemeName\"\n                                    name=\"sw-field--duplicate-theme-name\"\n                                    :label=\"$tc('sw-theme-manager.modal.labelDuplicateThemeName')\"\n                                    :placeholder=\"$tc('sw-theme-manager.modal.placeholderDuplicateThemeName')\"\n                                />\n                            {% endblock %}\n\n                            {% block sw_theme_list_duplicate_modal_footer %}\n                                <template #modal-footer>\n                                    {% block sw_theme_list_duplicate_modal_cancel %}\n                                        <sw-button @click=\"onCloseDuplicateModal\"\n                                                   size=\"small\">\n                                            {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                        </sw-button>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_duplicate_modal_confirm %}\n                                        <sw-button @click=\"onConfirmThemeDuplicate\"\n                                                   variant=\"primary\"\n                                                   :disabled=\"newThemeName.length < 3\"\n                                                   size=\"small\">\n                                            {{ $tc('sw-theme-manager.modal.buttonDuplicateTheme') }}\n                                        </sw-button>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-modal>\n                    {% endblock %}\n\n                    {% block sw_theme_list_rename_modal %}\n                        <sw-modal v-if=\"showRenameModal\"\n                                  class=\"sw_theme_manager__rename-modal\"\n                                  @modal-close=\"onCloseRenameModal\"\n                                  :title=\"$tc('sw-theme-manager.modal.modalTitleRename')\"\n                                  variant=\"small\">\n\n                            {% block sw_theme_list_rename__modal_name_input %}\n                                <div class=\"sw_theme_manager__rename-info\">\n                                    {{ $tc('sw-theme-manager.modal.textRenameInfo') }}\n                                </div>\n\n                                <sw-text-field\n                                    v-model:value=\"newThemeName\"\n                                    name=\"sw-field--rename-theme-name\"\n                                    :label=\"$tc('sw-theme-manager.modal.labelRenameThemeName')\"\n                                    :placeholder=\"$tc('sw-theme-manager.modal.placeholderRenameThemeName')\"\n                                />\n                            {% endblock %}\n\n                            {% block sw_theme_list_rename_modal_footer %}\n                                <template #modal-footer>\n                                    {% block sw_theme_list_rename_modal_cancel %}\n                                        <sw-button @click=\"onCloseRenameModal\"\n                                                   size=\"small\">\n                                            {{ $tc('sw-theme-manager.modal.buttonCancel') }}\n                                        </sw-button>\n                                    {% endblock %}\n\n                                    {% block sw_theme_list_rename_modal_confirm %}\n                                        <sw-button @click=\"onConfirmThemeRename\"\n                                                   variant=\"primary\"\n                                                   :disabled=\"newThemeName.length < 3\"\n                                                   size=\"small\">\n                                            {{ $tc('sw-theme-manager.modal.buttonRenameTheme') }}\n                                        </sw-button>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                        </sw-modal>\n                    {% endblock %}\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n","import template from './sw-theme-manager-list.html.twig';\nimport './sw-theme-manager-list.scss';\n\n/**\n * @package discovery\n */\n\nconst { Component, Mixin } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('sw-theme-manager-list', {\n    template,\n\n    inject: ['acl'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('listing'),\n        Mixin.getByName('theme')\n    ],\n\n    data() {\n        return {\n            themes: [],\n            isLoading: false,\n            total: 0,\n            disableRouteParams: true,\n            salesChannelId: this.$route.params.id,\n            listMode: 'grid',\n            sortBy: 'createdAt',\n            sortDirection: 'DESC',\n            limit: 9,\n            term: null\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier)\n        };\n    },\n\n    computed: {\n        languageRepository() {\n            return this.repositoryFactory.create('language');\n        },\n\n        columnConfig() {\n            return this.getColumnConfig();\n        },\n\n        sortOptions() {\n            return [\n                { value: 'createdAt:DESC', name: this.$tc('sw-theme-manager.sorting.labelSortByCreatedDsc') },\n                { value: 'createdAt:ASC', name: this.$tc('sw-theme-manager.sorting.labelSortByCreatedAsc') },\n                { value: 'updatedAt:DESC', name: this.$tc('sw-theme-manager.sorting.labelSortByUpdatedDsc') },\n                { value: 'updatedAt:ASC', name: this.$tc('sw-theme-manager.sorting.labelSortByUpdatedAsc') }\n            ];\n        },\n\n        sortingConCat() {\n            return `${this.sortBy}:${this.sortDirection}`;\n        },\n\n        lockToolTip() {\n            return {\n                showDelay: 100,\n                message: this.$tc('sw-theme-manager.general.lockedToolTip')\n            };\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        onRefresh() {\n            this.getList();\n        },\n\n        getList() {\n            this.isLoading = true;\n\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addAssociation('previewMedia');\n            criteria.addAssociation('salesChannels');\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection));\n            criteria.addFilter(Criteria.equals('active', true));\n\n            if (this.term !== null) {\n                criteria.setTerm(this.term);\n            }\n\n            return this.themeRepository.search(criteria, Shopware.Context.api).then((searchResult) => {\n                this.total = searchResult.total;\n                this.themes = searchResult;\n                this.isLoading = false;\n\n                return this.pages;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        resetList() {\n            this.page = 1;\n            this.themes = [];\n            this.updateRoute({\n                page: this.page,\n                limit: this.limit,\n                term: this.term,\n                sortBy: this.sortBy,\n                sortDirection: this.sortDirection\n            });\n\n            this.getList();\n        },\n\n        onChangeLanguage(languageId) {\n            Shopware.Context.api.languageId = languageId;\n            this.resetList();\n        },\n\n        onListItemClick(theme) {\n            this.$router.push({ name: 'sw.theme.manager.detail', params: { id: theme.id } });\n        },\n\n        onSortingChanged(value) {\n            [this.sortBy, this.sortDirection] = value.split(':');\n            this.resetList();\n        },\n\n        onSearch(value = null) {\n            this.term = value.length > 0 ? value : null;\n\n            this.resetList();\n        },\n\n        onPageChange({ page, limit }) {\n            this.page = page;\n            this.limit = limit;\n\n            this.getList();\n            this.updateRoute({\n                page: this.page,\n                limit: this.limit\n            });\n        },\n\n        onListModeChange() {\n            this.listMode = (this.listMode === 'grid') ? 'list' : 'grid';\n            this.limit = (this.listMode === 'grid') ? 9 : 10;\n\n            this.resetList();\n        },\n\n        onPreviewChange(theme) {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            this.showMediaModal = true;\n            this.currentTheme = theme;\n        },\n\n        onPreviewImageRemove(theme) {\n            if (!this.acl.can('theme.editor')) {\n                return;\n            }\n\n            theme.previewMediaId = null;\n            theme.previewMedia = null;\n            this.saveTheme(theme);\n        },\n\n        onModalClose() {\n            this.showMediaModal = false;\n            this.currentTheme = null;\n        },\n\n        onPreviewImageChange([image]) {\n            this.currentTheme.previewMediaId = image.id;\n            this.saveTheme(this.currentTheme);\n            this.currentTheme.previewMedia = image;\n        },\n\n        saveTheme(theme) {\n            this.isLoading = true;\n            return this.themeRepository.save(theme, Shopware.Context.api).then(() => {\n                this.isLoading = false;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        getColumnConfig() {\n            return [{\n                property: 'name',\n                label: this.$tc('sw-theme-manager.list.gridHeaderName'),\n                primary: true\n            },\n            {\n                property: 'salesChannels.length',\n                label: this.$tc('sw-theme-manager.list.gridHeaderAssignment'),\n                sortable: false,\n            },\n            {\n                property: 'createdAt',\n                label: this.$tc('sw-theme-manager.list.gridHeaderCreated')\n            }];\n        },\n\n        deleteDisabledToolTip(theme) {\n            return {\n                showDelay: 300,\n                message: this.$tc('sw-theme-manager.actions.deleteDisabledToolTip'),\n                disabled: theme.salesChannels.length === 0\n            };\n        }\n    }\n});\n","{% block sw_theme_list_item %}\n    <div class=\"sw-theme-list-item\" :class=\"componentClasses\">\n\n        {% block sw_theme_list_item_options %}\n            <slot name=\"contextMenu\"></slot>\n        {% endblock %}\n\n        {% block sw_theme_list_item_image %}\n            <div class=\"sw-theme-list-item__image\"\n                 v-if=\"theme\"\n                 :style=\"previewMedia\"\n                 @click=\"emitItemClick(theme)\">\n            </div>\n\n            <div class=\"sw-theme-list-item__image is--empty\" v-else>\n                {{ $tc('sw-theme-manager.themeListItem.emptyText') }}\n            </div>\n        {% endblock %}\n\n        {% block sw_theme_list_item_info %}\n            <div class=\"sw-theme-list-item__info\">\n                <div v-if=\"theme\" class=\"sw-theme-list-item__status\" :class=\"componentClasses\"></div>\n                <div class=\"sw-theme-list-item__title\" v-if=\"theme\" @click=\"onThemeClick\">{{ theme.name }}</div>\n                <sw-icon v-if=\"theme && theme.technicalName\"\n                         class=\"sw-theme-list-item__locked\"\n                         name=\"regular-lock\"\n                         v-tooltip=\"lockToolTip\"\n                         size=\"16\">\n                </sw-icon>\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n","import template from './sw-theme-list-item.html.twig';\nimport './sw-theme-list-item.scss';\n\n/**\n * @package discovery\n */\n\nconst { Component, Application } = Shopware;\n\nComponent.register('sw-theme-list-item', {\n    template,\n\n    props: {\n        theme: {\n            type: Object,\n            required: false,\n            default: null\n        },\n\n        active: {\n            type: Boolean,\n            required: false,\n            default: false\n        },\n\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false\n        }\n    },\n\n    computed: {\n        previewMedia() {\n            if (this.theme.previewMedia && this.theme.previewMedia.id && this.theme.previewMedia.url) {\n                return {\n                    'background-image': `url('${this.theme.previewMedia.url}')`,\n                    'background-size': 'cover'\n                };\n            }\n\n            return {\n                'background-image': this.defaultThemeAsset\n            };\n        },\n\n        defaultThemeAsset() {\n            const assetFilter = Shopware.Filter.getByName('asset');\n            const previewUrl = assetFilter('administration/static/img/theme/default_theme_preview.jpg');\n\n            return `url(${previewUrl})`;\n        },\n\n        lockToolTip() {\n            return {\n                showDelay: 100,\n                message: this.$tc('sw-theme-manager.general.lockedToolTip')\n            };\n        },\n\n        componentClasses() {\n            return {\n                'is--active': this.isActive(),\n                'is--disabled': this.disabled\n            };\n        }\n    },\n\n    methods: {\n        isActive() {\n            return this.theme && this.theme.salesChannels && this.theme.salesChannels.length > 0 || this.active;\n        },\n\n        onChangePreviewImage(theme) {\n            if (this.disabled) {\n                return;\n            }\n\n            this.$emit('preview-image-change', theme);\n        },\n\n        onThemeClick() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.$emit('item-click', this.theme);\n        },\n\n        onRemovePreviewImage(theme) {\n            theme.previewMediaId = null;\n            theme.save();\n            theme.previewMedia = null;\n        },\n\n        onDelete(theme) {\n            if (this.disabled) {\n                return;\n            }\n\n            this.$emit('theme-delete', theme);\n        },\n\n        emitItemClick(item) {\n            if (this.disabled) {\n                return;\n            }\n\n            this.$emit('item-click', item);\n        }\n    }\n});\n","{% block sw_theme_modal %}\n    <sw-modal\n        class=\"sw-theme-modal\"\n        @modal-close=\"closeModal\"\n        :title=\"$tc('sw-theme-manager.themeModal.modalTitle')\"\n        :subtitle=\"$tc('sw-theme-manager.themeModal.modalSubtitle')\"\n    >\n\n        {% block sw_theme_modal_header %}\n            <div class=\"sw-theme-modal__header\">\n                <sw-card-section class=\"sw-theme-modal__header-search\">\n                    <sw-container>\n                        <sw-simple-search-field\n                            class=\"sw-theme-modal__header-search\"\n                            variant=\"form\"\n                            :placeholder=\"$tc('sw-theme-manager.general.placeholderSearchBar')\"\n                            @search-term-change=\"onSearch\"\n                        ></sw-simple-search-field>\n                    </sw-container>\n                </sw-card-section>\n            </div>\n        {% endblock %}\n\n        {% block sw_theme_modal_content %}\n            <div class=\"sw-theme-modal__content\">\n                {% block sw_theme_modal_loader %}\n                    <sw-loader v-if=\"isLoading\"></sw-loader>\n                {% endblock %}\n\n                {% block sw_theme_modal_content %}\n                    <sw-container v-else columns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap=\"24px\">\n                        {% block sw_theme_modal_content_listing %}\n                            <div v-for=\"theme in themes\" class=\"sw-theme-modal__content-item\" :class=\"{ 'is--selected': theme.id === selected }\">\n                                {% block sw_theme_modal_content_listing_item %}\n\n                                    {% block sw_theme_modal_content_listing_item_checkbox %}\n                                        <sw-checkbox-field @update:value=\"onSelection(theme.id)\" :value=\"theme.id === selected\"></sw-checkbox-field>\n                                    {% endblock %}\n\n                                    {% block sw_theme_modal_content_listing_item_inner %}\n                                        <sw-theme-list-item\n                                            :theme=\"theme\"\n                                            :key=\"theme.id\"\n                                            @item-click=\"selectItem(theme.id)\">\n                                        </sw-theme-list-item>\n                                    {% endblock %}\n\n                                {% endblock %}\n                            </div>\n                        {% endblock %}\n                    </sw-container>\n                {% endblock %}\n            </div>\n        {% endblock %}\n\n        {% block sw_theme_modal_footer %}\n            <template #modal-footer>\n                <sw-button @click=\"closeModal\">\n                    {{ $tc('sw-theme-manager.themeModal.actionCancel') }}\n                </sw-button>\n                <sw-button @click=\"selectLayout\" variant=\"primary\">\n                    {{ $tc('sw-theme-manager.themeModal.actionConfirm') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n    </sw-modal>\n{% endblock %}\n","import template from './sw-theme-modal.html.twig';\nimport './sw-theme-modal.scss';\n\n/**\n * @package discovery\n */\n\nconst { Component, Mixin } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('sw-theme-modal', {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('listing')\n    ],\n\n    data() {\n        return {\n            selected: null,\n            isLoading: false,\n            sortBy: 'createdAt',\n            sortDirection: 'DESC',\n            term: '',\n            total: null,\n            themes: []\n        };\n    },\n\n    computed: {\n        themeRepository() {\n            return this.repositoryFactory.create('theme');\n        }\n    },\n\n    methods: {\n        getList() {\n            this.isLoading = true;\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addAssociation('previewMedia');\n            criteria.addAssociation('salesChannels');\n            criteria.addFilter(Criteria.equals('active', true));\n\n            criteria.addSorting(Criteria.sort(this.sortBy, this.sortDirection));\n            criteria.setTerm(this.term);\n\n            return this.themeRepository.search(criteria, Shopware.Context.api).then((searchResult) => {\n                this.total = searchResult.total;\n                this.themes = searchResult;\n                this.isLoading = false;\n\n                return this.themes;\n            }).catch(() => {\n                this.isLoading = false;\n            });\n        },\n\n        selectLayout() {\n            this.$emit('modal-theme-select', this.selected);\n            this.closeModal();\n        },\n\n        selectItem(themeId) {\n            this.selected = themeId;\n        },\n\n        onSearch(value) {\n            this.term = value;\n            this.page = 1;\n            this.getList();\n        },\n\n        onSelection(themeId) {\n            this.selected = themeId;\n        },\n\n        closeModal() {\n            this.$emit('modal-close');\n            this.selected = null;\n            this.term = null;\n        }\n    }\n});\n","/**\n * @package discovery\n */\n\nShopware.Service('privileges')\n    .addPrivilegeMappingEntry({\n        category: 'permissions',\n        parent: 'content',\n        key: 'theme',\n        roles: {\n            viewer: {\n                privileges: [\n                    'theme:read',\n                    'theme_child:read',\n                    'sales_channel:read',\n                    Shopware.Service('privileges').getPrivileges('media.viewer')\n                ],\n                dependencies: []\n            },\n            editor: {\n                privileges: [\n                    'theme:update',\n                    'theme_child:update',\n                    'tag:read',\n                    'product_media:read',\n                    'product:read',\n                    'category:read',\n                    'product_manufacturer:read',\n                    'mail_template_media:read',\n                    'mail_template:read',\n                    'document_base_config:read',\n                    'user:read',\n                    'payment_method:read',\n                    'shipping_method:read',\n                    'custom_field_set:read',\n                    'custom_field:read',\n                    'custom_field_set_relation:read',\n                    Shopware.Service('privileges').getPrivileges('media.creator')\n                ],\n                dependencies: [\n                    'theme.viewer'\n                ]\n            },\n            creator: {\n                privileges: [\n                    'theme:create',\n                    'theme_child:create'\n                ],\n                dependencies: [\n                    'theme.viewer',\n                    'theme.editor'\n                ]\n            },\n            deleter: {\n                privileges: [\n                    'theme:delete',\n                    'theme_child:delete'\n                ],\n                dependencies: [\n                    'theme.viewer'\n                ]\n            }\n        }\n    });\n","/**\n * @package discovery\n */\n\nimport './mixin/sw-theme.mixin';\nimport './page/sw-theme-manager-detail';\nimport './page/sw-theme-manager-list';\nimport './component/sw-theme-list-item/';\nimport './component/sw-theme-modal/';\nimport './acl';\n\nconst { Module } = Shopware;\n\nModule.register('sw-theme-manager', {\n    type: 'core',\n    title: 'sw-theme-manager.general.mainMenuItemGeneral',\n    description: 'sw-theme-manager.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#ff68b4',\n    icon: 'regular-content',\n    favicon: 'icon-module-content.png',\n    entity: 'theme',\n\n    routes: {\n        index: {\n            component: 'sw-theme-manager-list',\n            path: 'index',\n            meta: {\n                privilege: 'theme.viewer'\n            }\n        },\n        detail: {\n            component: 'sw-theme-manager-detail',\n            path: 'detail/:id',\n            meta: {\n                parentPath: 'sw.theme.manager.index',\n                privilege: 'theme.viewer'\n            }\n        }\n    },\n\n    navigation: [{\n        id: 'sw-theme-manager',\n        label: 'sw-theme-manager.general.mainMenuItemGeneral',\n        color: '#ff68b4',\n        icon: 'default-object-image',\n        path: 'sw.theme.manager.index',\n        privilege: 'theme.viewer',\n        position: 80,\n        parent: 'sw-content'\n    }],\n\n    // Add theme route to sales channel\n    routeMiddleware(next, currentRoute) {\n        const name = 'sw.sales.channel.detail.theme';\n        if (\n            currentRoute.name === 'sw.sales.channel.detail'\n            && currentRoute.children.every(child => child.name !== name)\n        ) {\n            currentRoute.children.push({\n                component: 'sw-sales-channel-detail-theme',\n                name,\n                isChildren: true,\n                path: '/sw/sales/channel/detail/:id/theme',\n                meta: {\n                    parentPath: 'sw.sales.channel.list',\n                    privilege: 'sales_channel.viewer'\n                }\n            });\n        }\n\n        next(currentRoute);\n    }\n});\n","{% block sw_settings_storefront_index %}\n<sw-page class=\"sw-settings-storefront\">\n\n    {% block sw_settings_storefront_smart_bar_header %}\n    <template #smart-bar-header>\n        {% block sw_settings_storefront_smart_bar_header_title %}\n        <h2>\n            {% block sw_settings_storefront_smart_bar_header_title_text %}\n            {{ $tc('sw-settings.index.title') }}\n            <sw-icon\n                name=\"regular-chevron-right-xs\"\n                small\n            />\n            {{ $tc('sw-settings-storefront.general.textHeadline') }}\n            {% endblock %}\n        </h2>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    {% block sw_settings_storefront_smart_bar_actions %}\n    <template #smart-bar-actions>\n        {% block sw_settings_storefront_actions_save %}\n        <sw-button-process\n            :is-loading=\"isLoading\"\n            :process-success=\"isSaveSuccessful\"\n            variant=\"primary\"\n            @process-finish=\"onSaveFinish\"\n            @click=\"savestorefrontSettings\"\n        >\n            {{ $tc('global.default.save') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    {% block sw_settings_storefront_content %}\n    <template #content>\n        <sw-card-view>\n            <sw-skeleton v-if=\"isLoading\" />\n\n            {% block sw_settings_storefront %}\n            <sw-card\n                position-identifier=\"sw-settings-storefront--settings\"\n                :title=\"$tc('sw-settings-storefront.configuration.cardTitle')\"\n                class=\"sw-settings-storefront__input-fields\"\n            >\n\n                {% block sw_settings_storefront_smtp_settings %}\n                    <sw-settings-storefront-configuration\n                        :storefront-settings=\"storefrontSettings\"\n                    />\n                {% endblock %}\n\n            </sw-card>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n","import template from './sw-settings-storefront-index.html.twig';\nimport './sw-settings-storefront-index.scss';\n\n/**\n * @sw-package framework\n */\nShopware.Component.register('sw-settings-storefront-index', {\n    template,\n\n    inject: ['systemConfigApiService'],\n\n    data() {\n        return {\n            isLoading: true,\n            isSaveSuccessful: false,\n            storefrontSettings: {\n                'core.storefrontSettings.iconCache': true,\n                'core.storefrontSettings.asyncThemeCompilation': false,\n                'core.storefrontSettings.speculationRules': false\n            },\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.loadPageContent();\n        },\n\n        async loadPageContent() {\n            await this.loadstorefrontSettings();\n        },\n\n        async loadstorefrontSettings() {\n            this.isLoading = true;\n            this.storefrontSettings = await this.systemConfigApiService.getValues('core.storefrontSettings');\n\n            // Default when config is empty\n            if (Object.keys(this.storefrontSettings).length === 0) {\n                this.storefrontSettings = {\n                    'core.storefrontSettings.iconCache': true,\n                    'core.storefrontSettings.asyncThemeCompilation': false,\n                    'core.storefrontSettings.speculationRules': false\n                };\n            }\n\n            this.isLoading = false;\n        },\n\n        async savestorefrontSettings() {\n            this.isLoading = true;\n\n            // Inputs cannot return null\n            if (this.storefrontSettings['core.storefrontSettings.iconCache'] === '') {\n                this.storefrontSettings['core.storefrontSettings.iconCache'] = true;\n            }\n\n            if (this.storefrontSettings['core.storefrontSettings.asyncThemeCompilation'] === '') {\n                this.storefrontSettings['core.storefrontSettings.asyncThemeCompilation'] = false;\n            }\n\n            if (this.storefrontSettings['core.storefrontSettings.speculationRules'] === '') {\n                this.storefrontSettings['core.storefrontSettings.speculationRules'] = false;\n            }\n\n            await this.systemConfigApiService.saveValues(this.storefrontSettings);\n            this.isLoading = false;\n        },\n\n        async onSaveFinish() {\n            await this.loadPageContent();\n        },\n    },\n});\n","{% block sw_settings_storefront %}\n<div class=\"sw-settings-storefront-configuration\">\n    {% block sw_settings_storefront_settings_icon_cache %}\n    <sw-switch-field\n        v-model:value=\"storefrontSettings['core.storefrontSettings.iconCache']\"\n        :label=\"$tc('sw-settings-storefront.configuration.iconCache')\"\n        v-tooltip.top=\"{\n                        message: $tc('sw-settings-storefront.configuration.iconCacheToolTip'),\n                        showOnDisabledElements: true\n                    }\"\n    />\n    {% endblock %}\n    {% block sw_settings_storefront_settings_theme_async %}\n        <sw-switch-field\n            v-model:value=\"storefrontSettings['core.storefrontSettings.asyncThemeCompilation']\"\n            :label=\"$tc('sw-settings-storefront.configuration.theme.async')\"\n            v-tooltip.top=\"{\n                        message: $tc('sw-settings-storefront.configuration.theme.asyncTooltip'),\n                        showOnDisabledElements: true\n                    }\"\n        />\n    {% endblock %}\n    {% block sw_settings_storefront_settings_speculation_rules %}\n        <sw-switch-field\n            v-model:value=\"storefrontSettings['core.storefrontSettings.speculationRules']\"\n            :label=\"$tc('sw-settings-storefront.configuration.speculationRules.title')\"\n            v-tooltip.top=\"{\n                        message: $tc('sw-settings-storefront.configuration.speculationRules.description'),\n                        showOnDisabledElements: true\n                    }\"\n        />\n    {% endblock %}\n</div>\n{% endblock %}\n","import template from './sw-settings-storefront-configuration.html.twig';\nimport './sw-settings-storefront-configuration.scss';\n\n/**\n * @sw-package framework\n */\nShopware.Component.register('sw-settings-storefront-configuration', {\n    template,\n\n    inject: ['feature'],\n\n    props: {\n        storefrontSettings: {\n            type: Object,\n            required: true,\n        },\n    },\n});\n","import './page/sw-settings-storefront-index';\nimport './component/sw-settings-storefront-configuration';\n\n/**\n * @sw-package framework\n */\nShopware.Module.register('sw-settings-storefront', {\n    type: 'core',\n    name: 'sw-settings-storefront',\n    title: 'sw-settings-storefront.general.mainMenuItemGeneral',\n    description: 'sw-settings-storefront.general.description',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n    favicon: 'icon-module-settings.png',\n\n    routes: {\n        index: {\n            component: 'sw-settings-storefront-index',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index.system',\n                privilege: 'system.system_config',\n            },\n        },\n    },\n\n    settingsItem: {\n        group: 'system',\n        to: 'sw.settings.storefront.index',\n        icon: 'regular-storefront',\n        privilege: 'system.system_config',\n    },\n});\n","{%  block sw_sales_channel_detail_content_tab_theme %}\n    <sw-tabs-item :disabled=\"isProductComparison || isLoading\"\n                  :route=\"{ name: 'sw.sales.channel.detail.theme', params: { id: $route.params.id } }\"\n                  :title=\"$tc('sw-sales-channel.detail.tabTheme')\">\n        {{ $tc('sw-sales-channel.detail.tabTheme') }}\n    </sw-tabs-item>\n{% endblock %}\n","import template from './sw-sales-channel-detail.html.twig';\n\nconst { Component } = Shopware;\n\n/**\n * @package discovery\n */\nComponent.override('sw-sales-channel-detail', {\n    template,\n\n    inject: [\n        'themeService',\n    ],\n\n    methods: {\n        getLoadSalesChannelCriteria() {\n            const criteria = this.$super('getLoadSalesChannelCriteria');\n\n            criteria.addAssociation('themes');\n\n            return criteria;\n        },\n\n        async onSave() {\n            this.isLoading = true;\n            await this.assignSalesChannelTheme();\n            await this.$super('onSave');\n        },\n\n        async assignSalesChannelTheme() {\n            const originThemeId = this.salesChannel.getOrigin().extensions?.themes?.[0]?.id;\n            const newThemeId = this.salesChannel.extensions?.themes?.[0]?.id;\n\n            if (originThemeId === newThemeId) {\n                return;\n            }\n\n            try {\n                await this.themeService.assignTheme(newThemeId, this.salesChannel.id);\n            } catch {\n                this.createNotificationError({\n                    message: this.$tc('sw-theme-manager.general.messageSaveError')\n                });\n            }\n        },\n    },\n});\n","{% block sw_sales_channel_detail_theme %}\n    <sw-card :title=\"$tc('sales-channel-theme.title')\" :isLoading=\"isLoading\">\n        <div class=\"sw-sales-channel-detail-theme\">\n\n            {% block sw_sales_channel_detail_theme_preview %}\n                <div class=\"sw-sales-channel-detail-theme__preview\">\n                    {% block sw_sales_channel_detail_theme_preview_item %}\n                        <div @click=\"openThemeModal\">\n                            <sw-theme-list-item\n                                :theme=\"theme\"\n                                :disabled=\"!acl.can('sales_channel.editor')\"\n                                :active=\"!!theme\">\n                            </sw-theme-list-item>\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_sales_channel_detail_theme_modal %}\n                        <sw-theme-modal\n                            v-if=\"showThemeSelectionModal\"\n                            @modal-theme-select=\"onChangeTheme\"\n                            @modal-close=\"closeThemeModal\">\n                        </sw-theme-modal>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n\n            {% block sw_sales_channel_detail_theme_info %}\n                <div class=\"sw-sales-channel-detail-theme__info\">\n\n                    {% block sw_sales_channel_detail_theme_info_content %}\n                        <div class=\"sw-sales-channel-detail-theme__info-content\">\n\n                            {% block sw_sales_channel_detail_theme_info_name %}\n                                <div class=\"sw-sales-channel-detail-theme__info-name\" :class=\"{ 'is--empty': !theme }\">\n                                    {{ theme ? theme.name : $tc('sales-channel-theme.defaultTitle') }}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_sales_channel_detail_theme_info_author %}\n                                <div v-if=\"theme\" class=\"sw-sales-channel-detail-theme__info-author\">\n                                    {{ theme.author }}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_sales_channel_detail_theme_info_description %}\n                                <div v-if=\"theme && theme.description\" class=\"sw-sales-channel-detail-theme__info-description\">\n                                    <p class=\"sw-sales-channel-detail-theme__info-description-title\">\n                                        {{ $tc('sw-theme-manager.detail.description') }}:\n                                    </p>\n                                    <p>{{ theme.description |truncate(140) }}</p>\n                                </div>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n\n                    {% block sw_sales_channel_detail_theme_info_actions %}\n                        <div class=\"sw-sales-channel-detail-theme__info-actions\">\n\n                            {% block sw_sales_channel_detail_theme_info_actions_theme %}\n                                <sw-button size=\"small\" @click=\"openThemeModal\" :disabled=\"!acl.can('sales_channel.editor')\">\n                                    {{ theme ? $tc('sales-channel-theme.changeTheme') : $tc('sales-channel-theme.changeThemeEmpty') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block sw_sales_channel_detail_theme_info_actions_manager %}\n                                <sw-button size=\"small\" @click=\"openInThemeManager\" :disabled=\"!acl.can('sales_channel.editor')\">\n                                    {{ theme ? $tc('sales-channel-theme.editContent'): $tc('sales-channel-theme.createTheme') }}\n                                </sw-button>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n        </div>\n    </sw-card>\n{% endblock %}\n","import template from './sw-sales-channel-detail-theme.html.twig';\nimport './sw-sales-channel-detail-theme.scss';\n\n/**\n * @package discovery\n */\n\nconst { Component, Mixin } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('sw-sales-channel-detail-theme', {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('placeholder')\n    ],\n\n    inject: [\n        'repositoryFactory',\n        'themeService',\n        'acl'\n    ],\n\n    props: {\n        salesChannel: {\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            theme: null,\n            showThemeSelectionModal: false,\n            showChangeModal: false,\n            newThemeId: null,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        themeRepository() {\n            return this.repositoryFactory.create('theme');\n        }\n    },\n\n    watch: {\n        'salesChannel.extensions.themes': {\n            deep: true,\n            handler() {\n                if (!this.salesChannel || !this.salesChannel.extensions || this.salesChannel.extensions.themes.length < 1) {\n                    return;\n                }\n\n                this.theme = this.salesChannel.extensions.themes[0];\n\n                this.getTheme(this.theme.id);\n            }\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.salesChannel ||\n                !this.salesChannel.extensions ||\n                this.salesChannel.extensions.themes.length < 1) {\n                return;\n            }\n\n            this.theme = this.salesChannel.extensions.themes[0];\n            this.getTheme(this.theme.id);\n        },\n\n        async getTheme(themeId) {\n            if (themeId === null) {\n                return;\n            }\n\n            const criteria = new Criteria();\n            criteria.addAssociation('previewMedia');\n\n            this.theme = await this.themeRepository.get(themeId, Shopware.Context.api, criteria);\n        },\n\n        openThemeModal() {\n            if (!this.acl.can('sales_channel.editor')) {\n                return;\n            }\n\n            this.showThemeSelectionModal = true;\n        },\n\n        closeThemeModal() {\n            this.showThemeSelectionModal = false;\n        },\n\n        openInThemeManager() {\n            if (!this.theme) {\n                this.$router.push({ name: 'sw.theme.manager.index' });\n            } else {\n                this.$router.push({ name: 'sw.theme.manager.detail', params: { id: this.theme.id } });\n            }\n        },\n\n        async onChangeTheme(themeId) {\n            this.showThemeSelectionModal = false;\n\n            await this.getTheme(themeId);\n            this.salesChannel.extensions.themes[0] = this.theme;\n        },\n    },\n});\n","const ApiService = Shopware.Classes.ApiService;\n\n/**\n * Gateway for the API end point \"theme\"\n *\n * @package discovery\n *\n * @class\n * @extends ApiService\n */\nclass ThemeApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'theme') {\n        super(httpClient, loginService, apiEndpoint);\n        this.name = 'themeService';\n    }\n\n    assignTheme(themeId, salesChannelId, additionalParams = {}, additionalHeaders = {}) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/${themeId}/assign/${salesChannelId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {},\n            {\n                params: { ...additionalParams },\n                headers: this.getBasicHeaders(additionalHeaders)\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    updateTheme(themeId, data, additionalParams = {}, additionalHeaders = {}) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/${themeId}`;\n\n        return this.httpClient.patch(\n            apiRoute,\n            data,\n            {\n                params: { ...additionalParams },\n                headers: this.getBasicHeaders(additionalHeaders)\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    resetTheme(themeId, additionalParams = {}, additionalHeaders = {}) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/${themeId}/reset`;\n\n        return this.httpClient.patch(\n            apiRoute,\n            {},\n            {\n                params: { ...additionalParams },\n                headers: this.getBasicHeaders(additionalHeaders)\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getConfiguration(themeId) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/${themeId}/configuration`;\n\n        const additionalHeaders = {\n            'sw-language-id': Shopware.Store.get('session').languageId\n        };\n\n        return this.httpClient.get(\n            apiRoute,\n            {\n                headers: this.getBasicHeaders(additionalHeaders)\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getStructuredFields(themeId) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/${themeId}/structured-fields`;\n\n        const additionalHeaders = {\n            'sw-language-id': Shopware.Store.get('session').languageId\n        };\n\n        return this.httpClient.get(\n            apiRoute,\n            {\n                headers: this.getBasicHeaders(additionalHeaders)\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    validateFields(fields) {\n        const apiRoute = `/_action/${this.getApiBasePath()}/validate-fields`;\n\n        const additionalHeaders = {\n            'sw-language-id': Shopware.Store.get('session').languageId\n        };\n\n        return this.httpClient.post(\n            apiRoute,\n            {fields: fields},\n            {\n                headers: this.getBasicHeaders(additionalHeaders)\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default ThemeApiService;\n","import ThemeService from '../core/service/api/theme.api.service';\n\nconst { Application } = Shopware;\n\nShopware.Service().register('themeService', (container) => {\n    const initContainer = Application.getContainer('init');\n    return new ThemeService(initContainer.httpClient, container.loginService);\n});\n"],"names":["Mixin","theme","titleDeleteError","messageDeleteError","parentTheme","name","themeDuplicate","template$7","Component","Criteria","getObjectDiff","cloneDeep","deepMergeObject","isArray","template","value","_a","_b","criteria","response","fieldName","fields","config","defaultTheme","folderId","ids","salesChannels","mediaItem","context","dragData","media","field","updateCurrentValue","isInherited","removeInheritance","currentValue","allValues","error","errorObject","clean","promises","salesChannelId","salesChannel","diff","overwrittenSalesChannel","newValues","filtered","key","item","searchResult","defaultFolder","_c","_d","selection","template$6","languageId","page","limit","image","template$5","Application","template$4","themeId","Module","next","currentRoute","child","template$3","template$2","template$1","_e","_f","originThemeId","newThemeId","ApiService","ThemeApiService","httpClient","loginService","apiEndpoint","additionalParams","additionalHeaders","apiRoute","data","container","initContainer","ThemeService"],"mappings":"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"}