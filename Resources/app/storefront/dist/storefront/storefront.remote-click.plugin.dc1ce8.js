"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[47550],{7550:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});var o=s(9568),i=s(447),l=s(4049);class n extends o.Z{static #e=this.options={selector:!1,scrollToElement:!0,scrollOffset:15,fixedHeaderSelector:"header.fixed-top",excludedViewports:[]};init(){if(!this.options.selector)throw Error('The option "selector" must be given!');this._registerEvents()}_registerEvents(){this.el.addEventListener("click",this._onClick.bind(this))}_onClick(){if(!this._isInAllowedViewports())return;let e=this.options.selector;l.Z.isNode(this.options.selector)||(e=l.Z.querySelector(document,this.options.selector)),this.options.scrollToElement&&this._scrollToElement(e);let t=null;document.createEvent?(t=document.createEvent("MouseEvents")).initEvent("click",!0,!0):t=new MouseEvent("click",{target:e}),e.dispatchEvent(t),this.$emitter.publish("onClick")}_scrollToElement(e){let t=this._getOffset(e);window.scrollTo({top:t,behavior:"smooth"})}_getOffset(e){let t=e.getBoundingClientRect().top+window.scrollY-this.options.scrollOffset,s=l.Z.querySelector(document,this.options.fixedHeaderSelector,!1);return s&&(t-=s.getBoundingClientRect().height),t}_isInAllowedViewports(){return!this.options.excludedViewports.includes(i.Z.getCurrentViewport())}}}}]);